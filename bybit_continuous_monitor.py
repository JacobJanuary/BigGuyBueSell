"""
–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Bybit —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏.
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤.
"""
import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Set, Optional
from decimal import Decimal
from collections import defaultdict
import time

from aiohttp import ClientSession
from database.models import Trade, TradingPairInfo
from config.settings import MIN_TRADE_VALUE_USD

logger = logging.getLogger(__name__)


class BybitContinuousMonitor:
    """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è Bybit —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º polling."""

    def __init__(self, session: ClientSession, db_manager):
        self.session = session
        self.db_manager = db_manager
        self.base_url = "https://api.bybit.com"

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.request_delay = 0.05  # 50ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–æ—á–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ)
        self.max_concurrent_pairs = 5  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –ø–∞—Ä
        self.batch_save_size = 20  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.last_trade_times: Dict[str, int] = {}  # symbol -> last_trade_timestamp
        self.seen_trade_ids: Dict[str, Set[str]] = defaultdict(set)  # symbol -> set of execIds
        self.pending_trades: List[Trade] = []  # –ë—É—Ñ–µ—Ä –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'errors': 0,
            'trades_found': 0,
            'trades_saved': 0,
            'duplicates_filtered': 0
        }

        # –ö–æ–Ω—Ç—Ä–æ–ª—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
        self.active_monitors: Dict[str, asyncio.Task] = {}
        self.stop_monitoring = False

    async def start_monitoring(self, pairs: List[TradingPairInfo]) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä."""
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        top_pairs = sorted(pairs, key=lambda x: x.volume_24h_usd, reverse=True)
        selected_pairs = top_pairs[:self.max_concurrent_pairs]

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {len(selected_pairs)} —Ç–æ–ø –ø–∞—Ä Bybit")
        for pair in selected_pairs:
            logger.info(f"   üìä {pair.symbol}: ${pair.volume_24h_usd:,.0f} –∑–∞ 24h")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        monitor_tasks = []
        for pair_info in selected_pairs:
            task = asyncio.create_task(
                self._monitor_pair_continuously(pair_info),
                name=f"monitor_{pair_info.symbol}"
            )
            self.active_monitors[pair_info.symbol] = task
            monitor_tasks.append(task)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_task = asyncio.create_task(self._periodic_save(), name="periodic_save")
        monitor_tasks.append(save_task)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_task = asyncio.create_task(self._periodic_stats(), name="periodic_stats")
        monitor_tasks.append(stats_task)

        try:
            await asyncio.gather(*monitor_tasks)
        except asyncio.CancelledError:
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Bybit –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        finally:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–¥–µ–ª–∫–∏
            await self._save_pending_trades()

    async def _monitor_pair_continuously(self, pair_info: TradingPairInfo) -> None:
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–π –ø–∞—Ä—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏."""
        symbol = pair_info.symbol
        consecutive_errors = 0
        last_request_time = 0

        logger.info(f"üîÑ –ù–∞—á–∞—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol}")

        while not self.stop_monitoring:
            try:
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—à–∏–±–æ–∫
                current_delay = self.request_delay * (1 + consecutive_errors)

                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—Ä–æ—à–ª–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                time_since_last = time.time() - last_request_time
                if time_since_last < current_delay:
                    await asyncio.sleep(current_delay - time_since_last)

                last_request_time = time.time()

                # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏
                trades_data = await self._get_recent_trades(symbol)
                self.stats['total_requests'] += 1

                if trades_data is None:
                    consecutive_errors += 1
                    self.stats['errors'] += 1

                    # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                    error_delay = min(5.0, 0.1 * (2 ** consecutive_errors))
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {symbol}, –ø–∞—É–∑–∞ {error_delay:.1f}—Å")
                    await asyncio.sleep(error_delay)
                    continue

                consecutive_errors = 0
                self.stats['successful_requests'] += 1

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                new_trades = await self._process_trades_data(trades_data, pair_info)

                if new_trades:
                    self.stats['trades_found'] += len(new_trades)
                    self.pending_trades.extend(new_trades)

                    # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                    large_trades = [t for t in new_trades if t.value_usd >= Decimal(str(MIN_TRADE_VALUE_USD))]
                    for trade in large_trades:
                        logger.info(
                            f"üí∞ {symbol}: ${trade.value_usd:,.0f} –≤ {trade.trade_datetime.strftime('%H:%M:%S')}")

            except asyncio.CancelledError:
                logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol} –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                consecutive_errors += 1
                self.stats['errors'] += 1
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
                await asyncio.sleep(1.0)

    async def _get_recent_trades(self, symbol: str) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –ø–∞—Ä—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π."""
        try:
            url = f"{self.base_url}/v5/market/recent-trade"
            params = {
                'category': 'spot',
                'symbol': symbol,
                'limit': 60  # –ú–∞–∫—Å–∏–º—É–º –¥–ª—è Bybit
            }

            async with self.session.get(url, params=params) as response:
                if response.status == 429 or response.status == 403:
                    # Rate limit - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    return None

                if response.status != 200:
                    return None

                data = await response.json()

                if data.get('retCode') == 0:
                    return data['result']['list']
                else:
                    return None

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {symbol}: {e}")
            return None

    async def _process_trades_data(self, trades_data: List[Dict], pair_info: TradingPairInfo) -> List[Trade]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã."""
        if not trades_data:
            return []

        symbol = pair_info.symbol
        new_trades = []

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏
        last_known_time = self.last_trade_times.get(symbol, 0)
        max_trade_time = last_known_time

        for trade_data in trades_data:
            try:
                exec_id = trade_data['execId']
                trade_time = int(trade_data['time'])

                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ ID
                if (trade_time > last_known_time and
                        exec_id not in self.seen_trade_ids[symbol]):

                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Trade
                    trade = Trade.from_bybit_response(
                        trade_data,
                        pair_info.symbol,
                        pair_info.base_asset,
                        pair_info.quote_asset,
                        pair_info.quote_price_usd
                    )

                    new_trades.append(trade)
                    self.seen_trade_ids[symbol].add(exec_id)
                    max_trade_time = max(max_trade_time, trade_time)
                else:
                    self.stats['duplicates_filtered'] += 1

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏ {symbol}: {e}")
                continue

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏
        if max_trade_time > last_known_time:
            self.last_trade_times[symbol] = max_trade_time

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞ ID (–ø–∞–º—è—Ç—å)
        if len(self.seen_trade_ids[symbol]) > 10000:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–≤–∏–Ω—É —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö ID
            sorted_ids = sorted(self.seen_trade_ids[symbol])
            self.seen_trade_ids[symbol] = set(sorted_ids[-5000:])

        return new_trades

    async def _periodic_save(self) -> None:
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏."""
        while not self.stop_monitoring:
            try:
                await asyncio.sleep(2.0)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                await self._save_pending_trades()
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    async def _save_pending_trades(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤ –ë–î."""
        if not self.pending_trades:
            return

        try:
            trades_to_save = self.pending_trades.copy()
            self.pending_trades.clear()

            if trades_to_save:
                new_count, dup_count = await self.db_manager.save_trades(trades_to_save)
                self.stats['trades_saved'] += new_count

                if new_count > 0:
                    logger.info(f"üíæ Bybit: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {new_count} –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫, –ø—Ä–æ–ø—É—â–µ–Ω–æ {dup_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ Bybit: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–¥–µ–ª–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –±—É—Ñ–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.pending_trades.extend(trades_to_save)

    async def _periodic_stats(self) -> None:
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        start_time = time.time()

        while not self.stop_monitoring:
            try:
                await asyncio.sleep(30.0)  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

                runtime = time.time() - start_time
                rps = self.stats['total_requests'] / runtime if runtime > 0 else 0
                success_rate = (self.stats['successful_requests'] / self.stats['total_requests'] * 100
                                if self.stats['total_requests'] > 0 else 0)

                logger.info(f"üìä Bybit —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {runtime:.0f}—Å:")
                logger.info(f"   –ó–∞–ø—Ä–æ—Å–æ–≤: {self.stats['total_requests']} ({rps:.1f} RPS)")
                logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {success_rate:.1f}%")
                logger.info(f"   –°–¥–µ–ª–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {self.stats['trades_found']}")
                logger.info(f"   –°–¥–µ–ª–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {self.stats['trades_saved']}")
                logger.info(f"   –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {self.stats['duplicates_filtered']}")
                logger.info(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {len([t for t in self.active_monitors.values() if not t.done()])}")

            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Bybit...")
        self.stop_monitoring = True

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task in self.active_monitors.values():
            if not task.done():
                task.cancel()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        if self.active_monitors:
            await asyncio.gather(*self.active_monitors.values(), return_exceptions=True)

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        await self._save_pending_trades()

        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Bybit –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        return self.stats.copy()


class BybitAggressiveClient:
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Bybit –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–æ–∫."""

    def __init__(self, session: ClientSession, rate_limiter):
        self.session = session
        self.rate_limiter = rate_limiter  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.base_url = "https://api.bybit.com"
        self.exchange_name = 'bybit'
        self.monitor: Optional[BybitContinuousMonitor] = None

    async def start_aggressive_monitoring(self, pairs: List[TradingPairInfo], db_manager) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
        if self.monitor:
            await self.monitor.stop()

        self.monitor = BybitContinuousMonitor(self.session, db_manager)
        await self.monitor.start_monitoring(pairs)

    async def stop_monitoring(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
        if self.monitor:
            await self.monitor.stop()
            self.monitor = None

    async def get_monitoring_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        if self.monitor:
            return self.monitor.get_stats()
        return {}

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–∞–∑–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
    async def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
        try:
            url = f"{self.base_url}/v5/market/time"
            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get('retCode') == 0
                return False
        except:
            return False

    async def get_instruments_info(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö."""
        url = f"{self.base_url}/v5/market/instruments-info"
        params = {'category': 'spot'}

        async with self.session.get(url, params=params) as response:
            response.raise_for_status()
            data = await response.json()

            if data.get('retCode') != 0:
                raise Exception(f"Bybit API error: {data.get('retMsg', 'Unknown error')}")

            return data

    async def get_24hr_tickers(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç 24hr —Ç–∏–∫–µ—Ä—ã."""
        url = f"{self.base_url}/v5/market/tickers"
        params = {'category': 'spot'}

        async with self.session.get(url, params=params) as response:
            response.raise_for_status()
            data = await response.json()

            if data.get('retCode') != 0:
                raise Exception(f"Bybit API error: {data.get('retMsg', 'Unknown error')}")

            return data['result']['list']