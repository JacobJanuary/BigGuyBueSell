#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º.
run_cache_tests.py
"""
import asyncio
import sys
import os
import subprocess
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))


def print_header():
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë      –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø             ‚ïë
    ‚ïë        –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú                      ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

    required_modules = [
        'asyncio',
        'datetime',
        'decimal',
        'unittest.mock'
    ]

    missing_modules = []

    for module in required_modules:
        try:
            __import__(module)
            print(f"  ‚úÖ {module}")
        except ImportError:
            missing_modules.append(module)
            print(f"  ‚ùå {module}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pytest –æ—Ç–¥–µ–ª—å–Ω–æ
    try:
        import pytest
        print(f"  ‚úÖ pytest")
    except ImportError:
        print(f"  ‚ö†Ô∏è  pytest (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")

    if missing_modules:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(missing_modules)}")
        return False

    print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ\n")
    return True


async def run_cache_analysis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üìä –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if os.path.exists('tests/test_cache_analysis.py'):
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            sys.path.append('tests')
            from tests.test_cache_analysis import run_cache_analysis
            await run_cache_analysis()
            return True
        else:
            print("‚ùå –§–∞–π–ª tests/test_cache_analysis.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


async def run_performance_demo():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    print("\nüöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)

    try:
        if os.path.exists('tests/test_cache_performance.py'):
            sys.path.append('tests')
            from tests.test_cache_performance import demonstrate_cache_problem
            await demonstrate_cache_problem()
            return True
        else:
            print("‚ùå –§–∞–π–ª tests/test_cache_performance.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False


def run_unit_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç unit —Ç–µ—Å—Ç—ã."""
    print("\nüß™ UNIT –¢–ï–°–¢–´")
    print("=" * 60)

    # –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    test_files = []
    test_dir = Path('tests')

    if test_dir.exists():
        for file in test_dir.glob('test_*.py'):
            test_files.append(str(file))

    if not test_files:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ tests/")
        return False

    print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(test_files)}")
    for file in test_files:
        print(f"  üìÑ {file}")

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å pytest
    try:
        result = subprocess.run([
                                    sys.executable, '-m', 'pytest'] + test_files + ['-v', '--tb=short'],
                                capture_output=True, text=True, timeout=120
                                )

        print("\n–†–ï–ó–£–õ–¨–¢–ê–¢–´ UNIT –¢–ï–°–¢–û–í:")
        print(result.stdout)

        if result.stderr:
            print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            print(result.stderr)

        return result.returncode == 0

    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤")
        return False
    except FileNotFoundError:
        print("‚ö†Ô∏è  pytest –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –Ω–∞–ø—Ä—è–º—É—é...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Python
        success_count = 0
        for test_file in test_files:
            try:
                result = subprocess.run([
                    sys.executable, test_file
                ], capture_output=True, text=True, timeout=60)

                if result.returncode == 0:
                    success_count += 1
                    print(f"‚úÖ {test_file}")
                else:
                    print(f"‚ùå {test_file}")
                    if result.stdout:
                        print(f"   {result.stdout[:200]}...")

            except Exception as e:
                print(f"‚ùå {test_file}: {e}")

        return success_count == len(test_files)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
        return False


def analyze_current_code():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º."""
    print("\nüîç –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –ö–û–î–ê")
    print("=" * 60)

    issues_found = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    files_to_check = [
        'workers/exchange_worker.py',
        'database/pairs_cache.py',
        'config/settings.py'
    ]

    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path} –Ω–∞–π–¥–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()

                # –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                if file_path == 'workers/exchange_worker.py':
                    if 'is_cache_fresh' in content and 'get_cached_pairs' in content:
                        fresh_count = content.count('is_cache_fresh')
                        if fresh_count > 1:
                            issues_found.append(
                                f"‚ùå {file_path}: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ is_cache_fresh() ({fresh_count} —Ä–∞–∑)")

                    if '_quick_cache' not in content and '_cached_pairs' not in content:
                        issues_found.append(f"‚ùå {file_path}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç in-memory –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")

                    if 'update_pairs_cache()' in content:
                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã API
                        api_calls = content.count('await self.client.get_')
                        if api_calls > 3:
                            issues_found.append(f"‚ö†Ô∏è  {file_path}: –ú–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤ ({api_calls})")

                elif file_path == 'config/settings.py':
                    if 'PAIRS_CACHE_UPDATE_MINUTES' not in content:
                        issues_found.append(f"‚ùå {file_path}: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞")

                    if 'MEMORY_CACHE' not in content:
                        issues_found.append(f"‚ùå {file_path}: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ in-memory –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")

            except Exception as e:
                issues_found.append(f"‚ùå {file_path}: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ - {e}")

        else:
            print(f"‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            issues_found.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: {file_path}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    if os.path.exists('.env'):
        print("‚úÖ .env –Ω–∞–π–¥–µ–Ω")
        try:
            with open('.env', 'r', encoding='utf-8') as f:
                env_content = f.read()

            if 'PAIRS_CACHE_UPDATE_MINUTES' not in env_content:
                issues_found.append("‚ö†Ô∏è  .env: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        except Exception as e:
            issues_found.append(f"‚ö†Ô∏è  .env: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - {e}")
    else:
        print("‚ö†Ô∏è  .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        issues_found.append("‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª .env")

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    if issues_found:
        print(f"\nüö® –ù–ê–ô–î–ï–ù–û –ü–†–û–ë–õ–ï–ú: {len(issues_found)}")
        for issue in issues_found:
            print(f"  {issue}")
    else:
        print("\n‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    return len(issues_found) == 0


def create_optimization_recommendations():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."""
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
    print("=" * 60)

    recommendations = [
        {
            'priority': '–ö–†–ò–¢–ò–ß–ù–û',
            'issue': '–ß–∞—Å—Ç—ã–µ API –≤—ã–∑–æ–≤—ã',
            'solution': '–ü—Ä–∏–º–µ–Ω–∏—Ç—å quick_cache_fix.py',
            'impact': '–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ API –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ 90%',
            'effort': '–ù–∏–∑–∫–∏–π (5 –º–∏–Ω—É—Ç)'
        },
        {
            'priority': '–í–´–°–û–ö–û',
            'issue': '–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞',
            'solution': '–í–Ω–µ–¥—Ä–∏—Ç—å in-memory –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'impact': '–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î –Ω–∞ 80%',
            'effort': '–°—Ä–µ–¥–Ω–∏–π (30 –º–∏–Ω—É—Ç)'
        },
        {
            'priority': '–°–†–ï–î–ù–ï',
            'issue': '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–µ—Ç—Ä–∏–∫ –∫—ç—à–∞',
            'solution': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å optimized_exchange_worker.py',
            'impact': '–£–ª—É—á—à–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏',
            'effort': '–°—Ä–µ–¥–Ω–∏–π (1 —á–∞—Å)'
        },
        {
            'priority': '–ù–ò–ó–ö–û',
            'issue': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
            'solution': '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å cache_optimization_settings.py',
            'impact': '–¢–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
            'effort': '–ù–∏–∑–∫–∏–π (15 –º–∏–Ω—É—Ç)'
        }
    ]

    for i, rec in enumerate(recommendations, 1):
        priority_icon = {
            '–ö–†–ò–¢–ò–ß–ù–û': 'üî¥',
            '–í–´–°–û–ö–û': 'üü†',
            '–°–†–ï–î–ù–ï': 'üü°',
            '–ù–ò–ó–ö–û': 'üü¢'
        }[rec['priority']]

        print(f"{i}. {priority_icon} {rec['priority']}")
        print(f"   –ü—Ä–æ–±–ª–µ–º–∞: {rec['issue']}")
        print(f"   –†–µ—à–µ–Ω–∏–µ: {rec['solution']}")
        print(f"   –≠—Ñ—Ñ–µ–∫—Ç: {rec['impact']}")
        print(f"   –£—Å–∏–ª–∏—è: {rec['effort']}\n")


def create_quick_fix():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."""
    print("\n‚ö° –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")
    print("=" * 60)

    if os.path.exists('quick_cache_fix.py'):
        print("‚úÖ –§–∞–π–ª quick_cache_fix.py —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        try:
            result = subprocess.run([sys.executable, 'quick_cache_fix.py'],
                                    capture_output=True, text=True, timeout=30)

            if result.stdout:
                print("–í—ã–≤–æ–¥ quick_cache_fix.py:")
                print(result.stdout)

            return result.returncode == 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ quick_cache_fix.py: {e}")
            return False
    else:
        print("‚ùå –§–∞–π–ª quick_cache_fix.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ quick_cache_fix.py")
        return False


def check_test_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    print("\nüìÅ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –ü–†–û–ï–ö–¢–ê")
    print("=" * 60)

    required_files = {
        'tests/test_cache_comprehensive.py': '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è',
        'tests/test_cache_analysis.py': '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è',
        'tests/test_cache_performance.py': '–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
        'workers/optimized_exchange_worker.py': '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä',
        'config/cache_optimization_settings.py': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏',
        'quick_cache_fix.py': '–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
    }

    missing_files = []
    existing_files = []

    for file_path, description in required_files.items():
        if os.path.exists(file_path):
            existing_files.append((file_path, description))
            print(f"‚úÖ {file_path} - {description}")
        else:
            missing_files.append((file_path, description))
            print(f"‚ùå {file_path} - {description}")

    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤:")
    print(f"  –ù–∞–π–¥–µ–Ω–æ: {len(existing_files)}/{len(required_files)}")
    print(f"  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(missing_files)}")

    if missing_files:
        print(f"\nüìã –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å:")
        for file_path, description in missing_files:
            print(f"  üìÑ {file_path}")

    return len(missing_files) == 0


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print_header()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return

    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. üîç –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–≤—Å–µ —Ç–µ—Å—Ç—ã + –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞)")
    print("2. üìä –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("3. üöÄ –¢–æ–ª—å–∫–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("4. üß™ –¢–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã")
    print("5. üîç –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–¥–∞")
    print("6. ‚ö° –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    print("7. üí° –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("8. üìÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤")
    print("9. üèóÔ∏è  –°–æ–∑–¥–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")

    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-9): ").strip()
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    results = {}

    if choice == "1":
        # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print("\nüîç –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê...")

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
        print("\n" + "=" * 60)
        results['files_check'] = check_test_files()

        # 2. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
        print("\n" + "=" * 60)
        results['code_analysis'] = analyze_current_code()

        # 3. Unit —Ç–µ—Å—Ç—ã
        print("\n" + "=" * 60)
        results['unit_tests'] = run_unit_tests()

        # 4. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        print("\n" + "=" * 60)
        try:
            results['cache_analysis'] = await run_cache_analysis()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            results['cache_analysis'] = False

        # 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("\n" + "=" * 60)
        try:
            results['performance_demo'] = await run_performance_demo()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            results['performance_demo'] = False

        # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        create_optimization_recommendations()

    elif choice == "2":
        try:
            results['cache_analysis'] = await run_cache_analysis()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            results['cache_analysis'] = False

    elif choice == "3":
        try:
            results['performance_demo'] = await run_performance_demo()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            results['performance_demo'] = False

    elif choice == "4":
        results['unit_tests'] = run_unit_tests()

    elif choice == "5":
        results['code_analysis'] = analyze_current_code()

    elif choice == "6":
        results['quick_fix'] = create_quick_fix()

    elif choice == "7":
        create_optimization_recommendations()
        results['recommendations'] = True

    elif choice == "8":
        results['files_check'] = check_test_files()

    elif choice == "9":
        print("\nüèóÔ∏è  –°–û–ó–î–ê–ù–ò–ï –î–ò–†–ï–ö–¢–û–†–ò–ô")
        print("=" * 60)

        directories = ['tests', 'workers', 'config']

        for directory in directories:
            if not os.path.exists(directory):
                try:
                    os.makedirs(directory)
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {directory}: {e}")
            else:
                print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {directory}")

        print(f"\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        results['directories_created'] = True

    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'=' * 80}")
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'=' * 80}")

    if results:
        passed_tests = sum(1 for result in results.values() if result is True)
        total_tests = len([r for r in results.values() if r is not None])

        print(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_tests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {passed_tests}")
        print(f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {total_tests - passed_tests}")

        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for test_name, result in results.items():
            if result is True:
                print(f"  ‚úÖ {test_name}")
            elif result is False:
                print(f"  ‚ùå {test_name}")
            else:
                print(f"  ‚ÑπÔ∏è  {test_name}")

    # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    print(f"\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")

    code_issues = not results.get('code_analysis', True)
    performance_issues = not results.get('performance_demo', True)
    files_missing = not results.get('files_check', True)

    if files_missing:
        print("1. üìÅ –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
        print("2. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
    elif code_issues or performance_issues:
        print("1. üîß –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –±—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: python quick_cache_fix.py")
        print("2. üìà –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("3. ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ .env")
        print("4. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏")
    else:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ!")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ –∫—ç—à–∞")

    print(f"\nüìÅ –§–ê–ô–õ–´ –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç):")
    missing_files = [
        "tests/test_cache_comprehensive.py",
        "tests/test_cache_analysis.py",
        "tests/test_cache_performance.py",
        "workers/optimized_exchange_worker.py",
        "config/cache_optimization_settings.py",
        "quick_cache_fix.py"
    ]

    for file in missing_files:
        if not os.path.exists(file):
            print(f"  üìÑ {file} - —Å–æ–∑–¥–∞–π—Ç–µ –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞")

    print(f"\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø –ü–û–°–õ–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
    print("  ‚Ä¢ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ API –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ 80-90%")
    print("  ‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ –≤ 5-10 —Ä–∞–∑")
    print("  ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –±–∏—Ä–∂–∏")
    print("  ‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")

    print(f"\nüìñ –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø:")
    print("  ‚Ä¢ quick_cache_fix.py - –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è")
    print("  ‚Ä¢ optimized_exchange_worker.py - –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–º–µ–Ω—ã")
    print("  ‚Ä¢ cache_optimization_settings.py - –¥–ª—è —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    print(f"\nüëã –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—Ä—É—á–Ω—É—é")