#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è Coinbase Advanced Trade API.
–ò—Å—Å–ª–µ–¥—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, –ª–∏–º–∏—Ç—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫.
"""
import asyncio
import json
import logging
import ssl
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Set
import time

import aiohttp
from aiohttp import ClientSession, TCPConnector

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ certifi –¥–ª—è SSL
try:
    import certifi

    HAS_CERTIFI = True
except ImportError:
    HAS_CERTIFI = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class CoinbaseAPITester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è Coinbase Advanced Trade API (–ø—É–±–ª–∏—á–Ω—ã–µ endpoints)."""

    def __init__(self, disable_ssl_verify: bool = False):
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ URL –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints
        self.base_urls = [
            "https://api.coinbase.com/api/v3/brokerage/public",  # –ü—É–±–ª–∏—á–Ω—ã–µ endpoints
            "https://api.coinbase.com/api/v3/brokerage",  # –û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å
            "https://api.coinbase.com",  # –ë–∞–∑–æ–≤—ã–π –¥–æ–º–µ–Ω
        ]
        self.session: Optional[ClientSession] = None
        self.disable_ssl_verify = disable_ssl_verify
        self.test_symbols = ['BTC-USD', 'ETH-USD', 'SOL-USD', 'ADA-USD', 'DOGE-USD']
        self.working_base_url = None

    def create_ssl_context(self) -> ssl.SSLContext:
        """–°–æ–∑–¥–∞–µ—Ç SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
        if self.disable_ssl_verify:
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            print("‚ö†Ô∏è  SSL –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
            return ssl_context
        else:
            ssl_context = ssl.create_default_context()
            try:
                if HAS_CERTIFI:
                    ssl_context.load_verify_locations(certifi.where())
                    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã certifi")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã certifi: {e}")
            return ssl_context

    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥."""
        ssl_context = self.create_ssl_context()
        connector = TCPConnector(
            limit=20,
            limit_per_host=10,
            ssl=ssl_context
        )
        timeout = aiohttp.ClientTimeout(total=30)
        self.session = ClientSession(connector=connector, timeout=timeout)
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥."""
        if self.session:
            await self.session.close()

    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API, –ø—Ä–æ–±—É—è —Ä–∞–∑–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ URL."""
        print("üîç –ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–∏—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints...")

        # –†–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        endpoints_to_try = [
            "/v2/exchange-rates",  # –ü—Ä–æ—Å—Ç–æ–π –ø—É–±–ª–∏—á–Ω—ã–π endpoint
            "/v2/currencies",  # –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç
            "/v2/time",  # –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
            "/products",  # –ü—Ä–æ–¥—É–∫—Ç—ã (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
            "/api/v3/brokerage/public/products",
            "/api/v3/brokerage/products",
        ]

        for base_url in self.base_urls:
            print(f"\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL: {base_url}")
            found_working_endpoint = False

            for endpoint in endpoints_to_try:
                try:
                    url = f"{base_url}{endpoint}"
                    print(f"   –ü—Ä–æ–±—É–µ–º: {url}")

                    async with self.session.get(url) as response:
                        print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")

                        if response.status == 200:
                            data = await response.json()
                            print(f"   ‚úÖ –£—Å–ø–µ—Ö! –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç")

                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
                            if isinstance(data, dict):
                                if 'data' in data:
                                    print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª–µ–º 'data'")
                                    if isinstance(data['data'], dict):
                                        print(f"   –ö–ª—é—á–∏ –≤ data: {list(data['data'].keys())[:5]}...")
                                    elif isinstance(data['data'], list):
                                        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ data: {len(data['data'])}")
                                elif 'products' in data:
                                    print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª–µ–º 'products'")
                                    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(data['products'])}")
                                else:
                                    print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ {list(data.keys())}")
                            elif isinstance(data, list):
                                print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: –º–∞—Å—Å–∏–≤ –∏–∑ {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

                            if not found_working_endpoint:
                                self.working_base_url = base_url
                                self.working_endpoint = endpoint
                                found_working_endpoint = True

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–∞–±–æ—á–∏–µ endpoints
                            if not hasattr(self, 'working_endpoints'):
                                self.working_endpoints = []
                            self.working_endpoints.append({
                                'base_url': base_url,
                                'endpoint': endpoint,
                                'full_url': url,
                                'data_format': 'dict_with_data' if isinstance(data,
                                                                              dict) and 'data' in data else 'other'
                            })

                        else:
                            error_text = await response.text()
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ {response.status}: {error_text[:100]}...")

                except Exception as e:
                    print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}...")
                    continue

            if found_working_endpoint:
                break

        if hasattr(self, 'working_endpoints') and self.working_endpoints:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.working_endpoints)} —Ä–∞–±–æ—á–∏—Ö endpoints!")
            return True
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–µ –ø—É–±–ª–∏—á–Ω—ã–µ endpoints")
            return False

    async def find_products_and_trades_endpoints(self) -> bool:
        """–ò—â–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ endpoints –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Å–¥–µ–ª–æ–∫."""
        if not self.working_base_url:
            return False

        print(f"\n{'=' * 60}")
        print("üîç –ü–û–ò–°–ö ENDPOINTS –î–õ–Ø –ü–†–û–î–£–ö–¢–û–í –ò –°–î–ï–õ–û–ö")
        print(f"{'=' * 60}")
        print(f"–ë–∞–∑–æ–≤—ã–π URL: {self.working_base_url}")

        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        products_endpoints = [
            "/api/v3/brokerage/market/products",
            "/api/v3/brokerage/products",
            "/api/v3/brokerage/public/products",
            "/v2/currencies/crypto",
            "/v2/assets/search",
            "/products",
            "/public/products",
        ]

        self.products_endpoint = None

        print("\nüìä –ü–æ–∏—Å–∫ endpoints –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
        for endpoint in products_endpoints:
            try:
                url = f"{self.working_base_url}{endpoint}"
                print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º: {endpoint}")

                async with self.session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —ç—Ç–æ –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                        products_found = False
                        product_count = 0

                        if isinstance(data, list):
                            if len(data) > 10:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                                products_found = True
                                product_count = len(data)
                        elif isinstance(data, dict):
                            if 'data' in data and isinstance(data['data'], list):
                                if len(data['data']) > 10:
                                    products_found = True
                                    product_count = len(data['data'])
                            elif 'products' in data:
                                products_found = True
                                product_count = len(data['products'])

                        if products_found:
                            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product_count}")
                            self.products_endpoint = endpoint

                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
                            sample_product = None
                            if isinstance(data, list) and data:
                                sample_product = data[0]
                            elif isinstance(data, dict):
                                if 'data' in data and data['data']:
                                    sample_product = data['data'][0]
                                elif 'products' in data and data['products']:
                                    sample_product = data['products'][0]

                            if sample_product:
                                print(f"   –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞: {list(sample_product.keys())}")
                                # –ò—â–µ–º –ø–æ–ª–µ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–¥—É–∫—Ç–∞
                                for key in ['id', 'product_id', 'symbol', 'code']:
                                    if key in sample_product:
                                        print(f"   ID –ø–æ–ª–µ: {key} = {sample_product[key]}")
                                        break
                            break
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ {response.status}")

            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:50]}...")
                continue

        if not self.products_endpoint:
            print("   ‚ùå Endpoints –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False

        # –¢–µ–ø–µ—Ä—å –∏—â–µ–º endpoints –¥–ª—è —Å–¥–µ–ª–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        print(f"\nüí± –ü–æ–∏—Å–∫ endpoints –¥–ª—è —Å–¥–µ–ª–æ–∫...")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_symbols = await self._get_test_symbols()
        if not test_symbols:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã")
            return False

        test_symbol = test_symbols[0]
        print(f"   –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–º–≤–æ–ª: {test_symbol}")

        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Å–¥–µ–ª–æ–∫
        trades_endpoints = [
            f"/api/v3/brokerage/market/products/{test_symbol}/trades",
            f"/api/v3/brokerage/products/{test_symbol}/trades",
            f"/api/v3/brokerage/public/products/{test_symbol}/trades",
            f"/products/{test_symbol}/trades",
            f"/public/products/{test_symbol}/trades",
        ]

        self.trades_endpoint_pattern = None

        for endpoint_pattern in trades_endpoints:
            try:
                endpoint = endpoint_pattern.replace(test_symbol, "{symbol}")
                url = endpoint_pattern.replace("{symbol}", test_symbol)
                full_url = f"{self.working_base_url}{url}"

                print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º: {endpoint}")

                async with self.session.get(full_url) as response:
                    if response.status == 200:
                        data = await response.json()

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —ç—Ç–æ –Ω–∞ —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
                        trades_found = False
                        trades_count = 0

                        if isinstance(data, list):
                            if data:  # –ï—Å—Ç—å —Å–¥–µ–ª–∫–∏
                                trades_found = True
                                trades_count = len(data)
                        elif isinstance(data, dict):
                            if 'data' in data and isinstance(data['data'], list):
                                trades_found = True
                                trades_count = len(data['data'])
                            elif 'trades' in data:
                                trades_found = True
                                trades_count = len(data['trades'])

                        if trades_found:
                            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω endpoint –¥–ª—è —Å–¥–µ–ª–æ–∫! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {trades_count}")
                            self.trades_endpoint_pattern = endpoint

                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å–¥–µ–ª–∫–∏
                            sample_trade = None
                            if isinstance(data, list) and data:
                                sample_trade = data[0]
                            elif isinstance(data, dict):
                                if 'data' in data and data['data']:
                                    sample_trade = data['data'][0]
                                elif 'trades' in data and data['trades']:
                                    sample_trade = data['trades'][0]

                            if sample_trade:
                                print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–¥–µ–ª–∫–∏: {list(sample_trade.keys())}")
                                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
                                for key in ['id', 'trade_id', 'price', 'size', 'amount', 'time']:
                                    if key in sample_trade:
                                        print(f"   {key}: {sample_trade[key]}")
                            return True

                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ {response.status}")

            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:50]}...")
                continue

        print("   ‚ùå Endpoints –¥–ª—è —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False

    async def _get_test_symbols(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ products endpoint."""
        if not self.products_endpoint:

    async def analyze_products(self) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º endpoint."""
        if not self.working_base_url or not hasattr(self, 'products_endpoint') or not self.products_endpoint:
            print("‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–µ–≥–æ products endpoint")
            return []

        print(f"\n{'=' * 60}")
        print("üîç –ê–ù–ê–õ–ò–ó –î–û–°–¢–£–ü–ù–´–• –ü–†–û–î–£–ö–¢–û–í")
        print(f"{'=' * 60}")
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {self.working_base_url}{self.products_endpoint}")

        try:
            url = f"{self.working_base_url}{self.products_endpoint}"

            async with self.session.get(url) as response:
                if response.status != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {response.status}")
                    return []

                data = await response.json()

                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º—Å—è –∫ —Ä–∞–∑–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º –æ—Ç–≤–µ—Ç–∞
                products = []
                if isinstance(data, list):
                    products = data
                elif isinstance(data, dict):
                    if 'products' in data:
                        products = data['products']
                    elif 'data' in data:
                        products = data['data']
                    else:
                        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {list(data.keys())}")
                        return []

                if not products:
                    print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                    return []

                print(f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                if products:
                    print(f"\nüî¨ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞:")
                    sample = products[0]
                    for key, value in sample.items():
                        print(f"   {key}: {value} ({type(value).__name__})")

                # –ò—â–µ–º USD –ø–∞—Ä—ã
                usd_pairs = []
                for product in products:
                    # –†–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è ID –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç endpoint
                    product_id = product.get('id') or product.get('product_id') or product.get('symbol', '')

                    if product_id and isinstance(product_id, str):
                        if '-USD' in product_id or (product_id.endswith('USD') and len(product_id) > 3):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –µ—Å—Ç—å
                            status = product.get('status', '').lower()
                            trading_disabled = product.get('trading_disabled', False)

                            if not status or status in ['online', 'active'] and not trading_disabled:
                                usd_pairs.append(product_id)

                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 USD –ø–∞—Ä
                top_symbols = sorted(usd_pairs)[:10]

                print(f"\nüî• –ù–∞–π–¥–µ–Ω–æ USD –ø–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(usd_pairs)}")
                for i, symbol in enumerate(top_symbols, 1):
                    print(f"   {i:2d}. {symbol}")

                return top_symbols[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
            return []

        try:
            url = f"{self.working_base_url}{self.products_endpoint}"
            async with self.session.get(url) as response:
                if response.status != 200:
                    return []

                data = await response.json()
                symbols = []

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
                products = []
                if isinstance(data, list):
                    products = data
                elif isinstance(data, dict):
                    if 'data' in data:
                        products = data['data']
                    elif 'products' in data:
                        products = data['products']

                for product in products[:20]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 –¥–ª—è –ø–æ–∏—Å–∫–∞ USD –ø–∞—Ä
                    # –ò—â–µ–º ID/—Å–∏–º–≤–æ–ª –ø—Ä–æ–¥—É–∫—Ç–∞
                    product_id = None
                    for key in ['id', 'product_id', 'symbol', 'code']:
                        if key in product and product[key]:
                            product_id = product[key]
                            break

                    if product_id and isinstance(product_id, str):
                        # –ò—â–µ–º USD –ø–∞—Ä—ã
                        if '-USD' in product_id or 'USD' in product_id:
                            symbols.append(product_id)
                            if len(symbols) >= 5:
                                break

                return symbols

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return []
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ä–∞–±–æ—á–∏–º endpoint."""
        if not self.working_base_url:
            print("‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–µ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ URL")
            return []

        print(f"\n{'=' * 60}")
        print("üîç –ê–ù–ê–õ–ò–ó –î–û–°–¢–£–ü–ù–´–• –ü–†–û–î–£–ö–¢–û–í")
        print(f"{'=' * 60}")
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {self.working_base_url}{self.working_endpoint}")

        try:
            url = f"{self.working_base_url}{self.working_endpoint}"

            async with self.session.get(url) as response:
                if response.status != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {response.status}")
                    return []

                data = await response.json()

                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º—Å—è –∫ —Ä–∞–∑–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º –æ—Ç–≤–µ—Ç–∞
                products = []
                if isinstance(data, list):
                    products = data
                elif isinstance(data, dict):
                    if 'products' in data:
                        products = data['products']
                    elif 'data' in data:
                        products = data['data']
                    else:
                        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {list(data.keys())}")
                        return []

                if not products:
                    print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                    return []

                print(f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                if products:
                    print(f"\nüî¨ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞:")
                    sample = products[0]
                    for key, value in sample.items():
                        print(f"   {key}: {value} ({type(value).__name__})")

                # –ò—â–µ–º USD –ø–∞—Ä—ã
                usd_pairs = []
                for product in products:
                    # –†–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è ID –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç endpoint
                    product_id = product.get('id') or product.get('product_id') or product.get('symbol', '')

                    if product_id and '-USD' in product_id:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –µ—Å—Ç—å
                        status = product.get('status', '').lower()
                        trading_disabled = product.get('trading_disabled', False)

                        if not status or status in ['online', 'active'] and not trading_disabled:
                            usd_pairs.append(product_id)

                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 USD –ø–∞—Ä
                top_symbols = sorted(usd_pairs)[:10]

                print(f"\nüî• –ù–∞–π–¥–µ–Ω–æ USD –ø–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(usd_pairs)}")
                for i, symbol in enumerate(top_symbols, 1):
                    print(f"   {i:2d}. {symbol}")

                return top_symbols[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
            return []

    async def test_trades_endpoint_limits(self, symbol: str) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–∏–º–∏—Ç—ã endpoint'–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫."""
        print(f"\n{'=' * 60}")
        print(f"üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–ò–ú–ò–¢–û–í –°–î–ï–õ–û–ö –î–õ–Ø {symbol}")
        print(f"{'=' * 60}")

        results = {}

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        limits_to_test = [1, 5, 10, 20, 50, 100, 200, 500, 1000]

        for limit in limits_to_test:
            try:
                url = f"{self.base_url}/products/{symbol}/trades"
                params = {'limit': limit}

                start_time = time.time()
                async with self.session.get(url, params=params) as response:
                    request_time = time.time() - start_time

                    if response.status == 200:
                        data = await response.json()

                        # Coinbase –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å trades –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                        if isinstance(data, list):
                            trades = data
                        elif isinstance(data, dict) and 'trades' in data:
                            trades = data['trades']
                        else:
                            trades = []

                        actual_count = len(trades)
                        results[limit] = {
                            'requested': limit,
                            'received': actual_count,
                            'request_time': request_time,
                            'success': True
                        }
                        print(f"   –õ–∏–º–∏—Ç {limit:4d}: –ø–æ–ª—É—á–µ–Ω–æ {actual_count:4d} —Å–¥–µ–ª–æ–∫ –∑–∞ {request_time:.3f}—Å")

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π —Å–¥–µ–ª–∫–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                        if limit == limits_to_test[0] and trades:
                            print(f"\nüî¨ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–¥–µ–ª–∫–∏:")
                            sample_trade = trades[0]
                            for key, value in sample_trade.items():
                                print(f"   {key}: {value} ({type(value).__name__})")
                    else:
                        error_text = await response.text()
                        results[limit] = {
                            'requested': limit,
                            'received': 0,
                            'request_time': request_time,
                            'success': False,
                            'error': f"HTTP {response.status}: {error_text}"
                        }
                        print(f"   –õ–∏–º–∏—Ç {limit:4d}: –û–®–ò–ë–ö–ê - {response.status}")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–æ–±–ª—é–¥–∞–µ–º rate limit 10 RPS)
                await asyncio.sleep(0.11)  # –ß—É—Ç—å –±–æ–ª—å—à–µ 0.1—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

            except Exception as e:
                results[limit] = {
                    'requested': limit,
                    'received': 0,
                    'request_time': 0,
                    'success': False,
                    'error': str(e)
                }
                print(f"   –õ–∏–º–∏—Ç {limit:4d}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ª–∏–º–∏—Ç
        max_working_limit = 0
        for limit, result in results.items():
            if result['success'] and result['received'] > 0:
                max_working_limit = max(max_working_limit, limit)

        print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –õ–ò–ú–ò–¢–û–í:")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ª–∏–º–∏—Ç: {max_working_limit}")

        return results

    async def test_rate_limits(self) -> None:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç rate limits API (10 RPS –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö endpoint'–æ–≤)."""
        print(f"\n{'=' * 60}")
        print("‚ö° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RATE LIMITS (10 RPS)")
        print(f"{'=' * 60}")

        test_symbol = 'BTC-USD'
        requests_per_batch = 15  # –ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        print(f"\nüìä –¢–µ—Å—Ç: {requests_per_batch} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥ (–ª–∏–º–∏—Ç 10 RPS)")

        start_time = time.time()
        success_count = 0
        error_count = 0
        rate_limited = 0

        tasks = []
        for i in range(requests_per_batch):
            task = self._single_trade_request(test_symbol, i)
            tasks.append(task)

        results = await asyncio.gather(*tasks, return_exceptions=True)

        for i, result in enumerate(results):
            if isinstance(result, Exception):
                print(f"   –ó–∞–ø—Ä–æ—Å {i + 1:2d}: ‚ùå {result}")
                error_count += 1
            elif result['success']:
                print(f"   –ó–∞–ø—Ä–æ—Å {i + 1:2d}: ‚úÖ {result['trades_count']} —Å–¥–µ–ª–æ–∫ –∑–∞ {result['time']:.3f}—Å")
                success_count += 1
            elif result['rate_limited']:
                print(f"   –ó–∞–ø—Ä–æ—Å {i + 1:2d}: üö´ Rate Limited")
                rate_limited += 1
            else:
                print(f"   –ó–∞–ø—Ä–æ—Å {i + 1:2d}: ‚ùå {result['error']}")
                error_count += 1

        batch_time = time.time() - start_time
        actual_rps = requests_per_batch / batch_time

        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ rate limits:")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}")
        print(f"   Rate limited: {rate_limited}")
        print(f"   –û—à–∏–±–æ–∫: {error_count}")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {batch_time:.2f}—Å")
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π RPS: {actual_rps:.1f}")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {1 / 10:.1f}—Å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")

    async def _single_trade_request(self, symbol: str, request_id: int) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —Å–¥–µ–ª–æ–∫."""
        try:
            start_time = time.time()
            url = f"{self.base_url}/products/{symbol}/trades"
            params = {'limit': 10}

            async with self.session.get(url, params=params) as response:
                request_time = time.time() - start_time

                if response.status == 200:
                    data = await response.json()
                    if isinstance(data, list):
                        trades_count = len(data)
                    elif isinstance(data, dict) and 'trades' in data:
                        trades_count = len(data['trades'])
                    else:
                        trades_count = 0

                    return {
                        'success': True,
                        'trades_count': trades_count,
                        'time': request_time,
                        'request_id': request_id,
                        'rate_limited': False
                    }
                elif response.status == 429:
                    return {
                        'success': False,
                        'error': 'Rate Limited',
                        'time': request_time,
                        'request_id': request_id,
                        'rate_limited': True
                    }
                else:
                    error_text = await response.text()
                    return {
                        'success': False,
                        'error': f"HTTP {response.status}: {error_text}",
                        'time': request_time,
                        'request_id': request_id,
                        'rate_limited': False
                    }
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'time': 0,
                'request_id': request_id,
                'rate_limited': False
            }

    async def test_data_freshness(self, symbol: str) -> None:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã."""
        print(f"\n{'=' * 60}")
        print(f"‚è∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–í–ï–ñ–ï–°–¢–ò –î–ê–ù–ù–´–• –î–õ–Ø {symbol}")
        print(f"{'=' * 60}")

        try:
            url = f"{self.base_url}/products/{symbol}/trades"
            params = {'limit': 100}

            async with self.session.get(url, params=params) as response:
                if response.status != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status}")
                    return

                data = await response.json()

                if isinstance(data, list):
                    trades = data
                elif isinstance(data, dict) and 'trades' in data:
                    trades = data['trades']
                else:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                    return

                if not trades:
                    print(f"‚ùå –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    return

                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {len(trades)}")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                times = []
                for trade in trades:
                    time_str = trade.get('time', '')
                    if time_str:
                        try:
                            trade_time = datetime.fromisoformat(time_str.replace('Z', '+00:00'))
                            times.append(trade_time)
                        except:
                            continue

                if times:
                    times.sort()
                    oldest_time = times[0]
                    newest_time = times[-1]
                    now = datetime.now(oldest_time.tzinfo)

                    print(f"üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑:")
                    print(f"   –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è —Å–¥–µ–ª–∫–∞: {oldest_time}")
                    print(f"   –°–∞–º–∞—è –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞:  {newest_time}")
                    print(f"   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:       {now}")
                    print(f"   –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–∞–Ω–Ω—ã—Ö:     {(now - newest_time).total_seconds():.1f} —Å–µ–∫—É–Ω–¥")
                    print(f"   –í—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ö–≤–∞—Ç:     {(newest_time - oldest_time).total_seconds():.1f} —Å–µ–∫—É–Ω–¥")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ID —Å–¥–µ–ª–æ–∫
                trade_ids = [trade.get('trade_id', trade.get('id', '')) for trade in trades]
                unique_ids = set(filter(None, trade_ids))
                print(f"üÜî –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID: {len(unique_ids)}/{len(trades)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
                volumes = []
                for trade in trades:
                    try:
                        price = float(trade.get('price', 0))
                        size = float(trade.get('size', 0))
                        volume = price * size
                        volumes.append(volume)
                    except (ValueError, TypeError):
                        continue

                if volumes:
                    print(f"üí∞ –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤:")
                    print(f"   –ú–∏–Ω. –æ–±—ä–µ–º —Å–¥–µ–ª–∫–∏: ${min(volumes):,.2f}")
                    print(f"   –ú–∞–∫—Å. –æ–±—ä–µ–º —Å–¥–µ–ª–∫–∏: ${max(volumes):,.2f}")
                    print(f"   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º:     ${sum(volumes) / len(volumes):,.2f}")

                    large_trades = [v for v in volumes if v >= 10000]  # $10k+
                    if large_trades:
                        print(f"   –°–¥–µ–ª–∫–∏ $10k+: {len(large_trades)} ({len(large_trades) / len(volumes) * 100:.1f}%)")
                        print(f"   –ö—Ä—É–ø–Ω–µ–π—à–∞—è —Å–¥–µ–ª–∫–∞: ${max(large_trades):,.2f}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def generate_recommendations(self) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."""
        print(f"\n{'=' * 60}")
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø COINBASE API")
        print(f"{'=' * 60}")

        if hasattr(self, 'trades_endpoint_pattern') and self.trades_endpoint_pattern:
            print(f"‚úÖ –£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ endpoints!")
            print(f"1Ô∏è‚É£ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
            print(f"   ‚Ä¢ –ë–∞–∑–æ–≤—ã–π URL: {self.working_base_url}")
            print(f"   ‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç—ã: {self.products_endpoint}")
            print(f"   ‚Ä¢ –°–¥–µ–ª–∫–∏: {self.trades_endpoint_pattern}")

            print(f"\n2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
            print(f"   ‚Ä¢ Rate limit: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É")
            print(f"   ‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: 0.1 —Å–µ–∫—É–Ω–¥—ã")
            print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –∑–∞ –∑–∞–ø—Ä–æ—Å: –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç—ã")

            print(f"\n3Ô∏è‚É£ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è:")
            print(f"   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å base_url –≤ CoinbaseClient")
            print(f"   ‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            print(f"   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é —Å–∏–º–≤–æ–ª–æ–≤")

        elif hasattr(self, 'working_endpoints') and self.working_endpoints:
            print(f"‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ endpoints")

            print(f"1Ô∏è‚É£ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            for ep in self.working_endpoints:
                print(f"   ‚Ä¢ {ep['endpoint']} - {ep['data_format']}")

            print(f"\n2Ô∏è‚É£ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:")
            print(f"   ‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            print(f"   ‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–¥–µ–ª–∫–∞–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            print(f"   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

            print(f"\n3Ô∏è‚É£ –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:")
            print(f"   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å API –∫–ª—é—á–∏ Coinbase –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebSocket –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            print(f"   ‚Ä¢ –ò—Å–∫–ª—é—á–∏—Ç—å Coinbase –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            print(f"   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –±–∏—Ä–∂—É (Kraken, KuCoin)")

        else:
            print(f"‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û: –ü—É–±–ª–∏—á–Ω—ã–µ endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

            print(f"1Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print(f"   ‚Ä¢ Coinbase —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")
            print(f"   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –±–∏—Ä–∂")
            print(f"   ‚Ä¢ –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ API –∫–ª—é—á–∏ Coinbase")

            print(f"\n2Ô∏è‚É£ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –±–∏—Ä–∂–∏:")
            print(f"   ‚Ä¢ Kraken - —Ö–æ—Ä–æ—à–∏–µ –ø—É–±–ª–∏—á–Ω—ã–µ API")
            print(f"   ‚Ä¢ KuCoin - –º–Ω–æ–≥–æ –ø–∞—Ä, –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            print(f"   ‚Ä¢ OKX - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã")
            print(f"   ‚Ä¢ Gate.io - –±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä –ø–∞—Ä")

        print(f"\n4Ô∏è‚É£ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Binance + Bybit")
        print(f"   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π –±–∏—Ä–∂–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
        print(f"   ‚Ä¢ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤—É—Ö–±–∏—Ä–∂–µ–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        print(f"   ‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –±–∏—Ä–∂—É –ø–æ–∑–∂–µ")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë          COINBASE API ENDPOINT EXPLORER           ‚ïë
    ‚ïë                                                   ‚ïë
    ‚ïë  –ü–æ–∏—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö API endpoints    ‚ïë
    ‚ïë  –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫     ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

    # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å SSL, –ø–æ—Ç–æ–º –±–µ–∑
    print("üîê –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π SSL...")
    async with CoinbaseAPITester(disable_ssl_verify=False) as tester:
        if await tester.test_connection():
            ssl_works = True
        else:
            ssl_works = False

    if not ssl_works:
        print("\n‚ö†Ô∏è  SSL –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
        async with CoinbaseAPITester(disable_ssl_verify=True) as tester:
            if not await tester.test_connection():
                print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–µ –ø—É–±–ª–∏—á–Ω—ã–µ endpoints")
                print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("   ‚Ä¢ Coinbase —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö endpoints")
                print("   ‚Ä¢ –ò–∑–º–µ–Ω–∏–ª–∏—Å—å –ø—É—Ç–∏ –∫ –ø—É–±–ª–∏—á–Ω—ã–º API")
                print("   ‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebSocket –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                print("   ‚Ä¢ API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ")
                return

            await run_all_tests(tester)
    else:
        print("‚úÖ SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        async with CoinbaseAPITester(disable_ssl_verify=False) as tester:
            if await tester.test_connection():
                await run_all_tests(tester)
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–µ endpoints –¥–∞–∂–µ —Å SSL")


async def run_all_tests(tester):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º endpoints –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Å–¥–µ–ª–æ–∫
    found_trading_endpoints = await tester.find_products_and_trades_endpoints()

    if found_trading_endpoints:
        print(f"\nüéâ –ù–∞–π–¥–µ–Ω—ã endpoints –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
        print(f"   –ü—Ä–æ–¥—É–∫—Ç—ã: {tester.products_endpoint}")
        print(f"   –°–¥–µ–ª–∫–∏: {tester.trades_endpoint_pattern}")

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        top_symbols = await tester.analyze_products()

        if top_symbols:
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ trades
            test_results = await tester.test_trades_endpoint_limits(top_symbols[0])

            if test_results:
                # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limits
                await tester.test_rate_limits()

                # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
                await tester.test_data_freshness(top_symbols[0])
    else:
        print(f"\n‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤—ã–µ endpoints –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print(f"–ù–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ endpoints:")
        if hasattr(tester, 'working_endpoints'):
            for ep in tester.working_endpoints:
                print(f"   ‚Ä¢ {ep['full_url']}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    await tester.generate_recommendations()

    print(f"\n{'=' * 60}")
    print("‚úÖ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï COINBASE API –ó–ê–í–ï–†–®–ï–ù–û")
    print(f"{'=' * 60}")

    if hasattr(tester, 'trades_endpoint_pattern') and tester.trades_endpoint_pattern:
        print(f"üéØ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–¥–µ–ª–æ–∫:")
        print(f"   –ë–∞–∑–æ–≤—ã–π URL: {tester.working_base_url}")
        print(f"   –ü—Ä–æ–¥—É–∫—Ç—ã: {tester.products_endpoint}")
        print(f"   –°–¥–µ–ª–∫–∏: {tester.trades_endpoint_pattern}")
    elif hasattr(tester, 'working_endpoints') and tester.working_endpoints:
        print(f"üéØ –î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"   –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç, –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç.–¥.")
        print(f"   –î–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
    else:
        print("‚ùå –†–∞–±–æ—á–∏–µ –ø—É–±–ª–∏—á–Ω—ã–µ endpoints –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebSocket –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


if __name__ == "__main__":
    asyncio.run(main())