#!/usr/bin/env python3
"""
–ü–∞—Ç—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ config/settings.py
config/settings_cache_patch.py
"""
import os
import shutil
from datetime import datetime

# !/usr/bin/env python3
"""
–ü–∞—Ç—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ config/settings.py
config/settings_cache_patch.py
"""
import os
import shutil
from datetime import datetime
from pathlib import Path


def find_settings_file():
    """–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª config/settings.py –≤ –ø—Ä–æ–µ–∫—Ç–µ."""
    possible_paths = [
        'config/settings.py',
        './config/settings.py',
        '../config/settings.py',
        '../../config/settings.py'
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
    current_dir = Path(__file__).parent
    project_root = current_dir.parent if current_dir.name == 'config' else current_dir
    settings_from_root = project_root / 'config' / 'settings.py'
    possible_paths.insert(0, str(settings_from_root))

    print("üîç –ü–æ–∏—Å–∫ config/settings.py...")
    print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")

    for path in possible_paths:
        abs_path = os.path.abspath(path)
        print(f"  –ü—Ä–æ–≤–µ—Ä—è–µ–º: {abs_path}")
        if os.path.exists(path):
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω: {abs_path}")
            return path
        else:
            print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {abs_path}")

    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
    print("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫...")
    for root, dirs, files in os.walk('.'):
        if 'settings.py' in files and 'config' in root:
            found_path = os.path.join(root, 'settings.py')
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫: {os.path.abspath(found_path)}")
            return found_path

    return None


def backup_settings(settings_file):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é settings.py."""
    if not os.path.exists(settings_file):
        print(f"‚ùå –§–∞–π–ª {settings_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    # –°–æ–∑–¥–∞–µ–º backup –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —á—Ç–æ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª
    settings_dir = os.path.dirname(settings_file)
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_file = os.path.join(settings_dir, f'settings_backup_{timestamp}.py')

    try:
        shutil.copy2(settings_file, backup_file)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
        return backup_file
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return None


def apply_cache_settings():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫ config/settings.py."""
    # –ò—â–µ–º —Ñ–∞–π–ª settings.py
    settings_file = find_settings_file()

    if not settings_file:
        print("‚ùå –§–∞–π–ª config/settings.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ñ–∞–π–ª config/settings.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python config/settings_cache_patch.py")
        return False

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file = backup_settings(settings_file)
    if not backup_file:
        return False

    try:
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        with open(settings_file, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if 'MEMORY_CACHE_ENABLED' in content:
            print("‚ÑπÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_env_*
        has_get_env_functions = 'def get_env_int(' in content and 'def get_env_bool(' in content

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        if has_get_env_functions:
            # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            cache_settings = '''

# =================== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ===================

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
CACHE_OPTIMIZATION_ENABLED = get_env_bool('CACHE_OPTIMIZATION_ENABLED', True)
MEMORY_CACHE_ENABLED = get_env_bool('MEMORY_CACHE_ENABLED', True)
MEMORY_CACHE_TTL_MINUTES = get_env_int('MEMORY_CACHE_TTL_MINUTES', 30)
API_UPDATE_INTERVAL_MINUTES = get_env_int('API_UPDATE_INTERVAL_MINUTES', 60)
DB_CACHE_TTL_HOURS = get_env_int('DB_CACHE_TTL_HOURS', 2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—ç—à–∞
CACHE_METRICS_ENABLED = get_env_bool('CACHE_METRICS_ENABLED', True)
CACHE_FALLBACK_ENABLED = get_env_bool('CACHE_FALLBACK_ENABLED', True)
CACHE_DEBUG_LOGGING = get_env_bool('CACHE_DEBUG_LOGGING', False)

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
CACHE_HIT_RATE_WARNING_THRESHOLD = get_env_int('CACHE_HIT_RATE_WARNING_THRESHOLD', 70)
API_CALLS_PER_HOUR_WARNING = get_env_int('API_CALLS_PER_HOUR_WARNING', 10)

if LOG_LEVEL == 'DEBUG':
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# ============================================================
'''
        else:
            # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Ç–æ–∂–µ
            cache_settings = '''

# =================== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ===================

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç)
def get_env_int(key: str, default: int) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç integer –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    try:
        value = os.getenv(key)
        if value is None:
            return default
        return int(value)
    except (ValueError, TypeError):
        return default

def get_env_bool(key: str, default: bool) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç boolean –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    value = os.getenv(key, '').lower()
    if value in ('true', '1', 'yes', 'on'):
        return True
    elif value in ('false', '0', 'no', 'off'):
        return False
    return default

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
CACHE_OPTIMIZATION_ENABLED = get_env_bool('CACHE_OPTIMIZATION_ENABLED', True)
MEMORY_CACHE_ENABLED = get_env_bool('MEMORY_CACHE_ENABLED', True)
MEMORY_CACHE_TTL_MINUTES = get_env_int('MEMORY_CACHE_TTL_MINUTES', 30)
API_UPDATE_INTERVAL_MINUTES = get_env_int('API_UPDATE_INTERVAL_MINUTES', 60)
DB_CACHE_TTL_HOURS = get_env_int('DB_CACHE_TTL_HOURS', 2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—ç—à–∞
CACHE_METRICS_ENABLED = get_env_bool('CACHE_METRICS_ENABLED', True)
CACHE_FALLBACK_ENABLED = get_env_bool('CACHE_FALLBACK_ENABLED', True)
CACHE_DEBUG_LOGGING = get_env_bool('CACHE_DEBUG_LOGGING', False)

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
CACHE_HIT_RATE_WARNING_THRESHOLD = get_env_int('CACHE_HIT_RATE_WARNING_THRESHOLD', 70)
API_CALLS_PER_HOUR_WARNING = get_env_int('API_CALLS_PER_HOUR_WARNING', 10)

if LOG_LEVEL == 'DEBUG':
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# ============================================================
'''

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        new_content = content + cache_settings

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        with open(settings_file, 'w', encoding='utf-8') as f:
            f.write(new_content)

        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {settings_file}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        try:
            shutil.copy2(backup_file, settings_file)
            print("üîÑ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        except:
            pass

        return False


def create_env_patch():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª."""
    env_file = '.env'

    env_settings = '''
# =================== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ===================
CACHE_OPTIMIZATION_ENABLED=true
MEMORY_CACHE_ENABLED=true
MEMORY_CACHE_TTL_MINUTES=30
API_UPDATE_INTERVAL_MINUTES=60
DB_CACHE_TTL_HOURS=2
CACHE_METRICS_ENABLED=true
CACHE_FALLBACK_ENABLED=true
CACHE_DEBUG_LOGGING=false
'''

    try:
        if os.path.exists(env_file):
            with open(env_file, 'r', encoding='utf-8') as f:
                content = f.read()

            if 'MEMORY_CACHE_ENABLED' not in content:
                with open(env_file, 'a', encoding='utf-8') as f:
                    f.write(env_settings)
                print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ .env")
            else:
                print("‚ÑπÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –µ—Å—Ç—å –≤ .env")
        else:
            with open(env_file, 'w', encoding='utf-8') as f:
                f.write(env_settings.strip())
            print("‚úÖ –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë        –ü–ê–¢–ß –ù–ê–°–¢–†–û–ï–ö –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø                  ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. üîß –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ config/settings.py")
    print("2. ‚öôÔ∏è  –û–±–Ω–æ–≤–∏—Ç—å .env —Ñ–∞–π–ª")
    print("3. üöÄ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("4. üö™ –í—ã—Ö–æ–¥")

    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥")
        return

    if choice == "1":
        print("\nüîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ config/settings.py...")
        success = apply_cache_settings()
        if success:
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    elif choice == "2":
        print("\n‚öôÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞...")
        success = create_env_patch()
        if success:
            print("‚úÖ .env —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å .env")

    elif choice == "3":
        print("\nüöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")

        settings_success = apply_cache_settings()
        env_success = create_env_patch()

        if settings_success and env_success:
            print("""
‚úÖ –í–°–ï –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–ú–ï–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!

üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ python run_cache_tests.py –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

üîÑ –î–ª—è –æ—Ç–∫–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤ config/
            """)
        else:
            print("‚ùå –ù–µ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    elif choice == "4":
        print("üëã –í—ã—Ö–æ–¥")

    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main()