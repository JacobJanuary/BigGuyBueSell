"""
–ú–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤.
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List

logger = logging.getLogger(__name__)


class HealthMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –≤–æ—Ä–∫–µ—Ä–æ–≤."""

    def __init__(self, check_interval_minutes: int = 15):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è.

        Args:
            check_interval_minutes: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        self.check_interval_minutes = check_interval_minutes
        self.workers: List = []
        self.is_running = False
        self.last_check_time = None
        self.health_history: Dict[str, List] = {}

    def register_worker(self, worker):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ—Ä–∫–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.

        Args:
            worker: –≠–∫–∑–µ–º–ø–ª—è—Ä ExchangeWorker
        """
        self.workers.append(worker)
        self.health_history[worker.exchange_name] = []
        logger.info(f"Health Monitor: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤–æ—Ä–∫–µ—Ä {worker.exchange_name}")

    def check_worker_health(self, worker) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –æ–¥–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞.

        Args:
            worker: –≠–∫–∑–µ–º–ø–ª—è—Ä ExchangeWorker

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–¥–æ—Ä–æ–≤—å–µ
        """
        now = datetime.now()
        stats = worker.get_stats()

        health_info = {
            'exchange': worker.exchange_name,
            'is_running': worker.is_running,
            'cycle_count': stats['cycle_count'],
            'total_trades_found': stats['total_trades_found'],
            'total_trades_saved': stats['total_trades_saved'],
            'check_time': now,
            'status': 'healthy',
            'issues': []
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∑–¥–æ—Ä–æ–≤—å—è
        if not worker.is_running:
            health_info['status'] = 'stopped'
            health_info['issues'].append('–í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ü–∏–∫–ª–∞—Ö
        if worker.exchange_name in self.health_history:
            recent_checks = self.health_history[worker.exchange_name]
            if recent_checks:
                last_cycle_count = recent_checks[-1].get('cycle_count', 0)
                if stats['cycle_count'] == last_cycle_count and worker.is_running:
                    health_info['status'] = 'stalled'
                    health_info['issues'].append('–ù–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ü–∏–∫–ª–∞—Ö')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫)
        self.health_history[worker.exchange_name].append(health_info.copy())
        if len(self.health_history[worker.exchange_name]) > 10:
            self.health_history[worker.exchange_name].pop(0)

        return health_info

    async def perform_health_check(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤."""
        self.last_check_time = datetime.now()

        logger.info("üè• –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–æ—Ä–∫–µ—Ä–æ–≤...")

        all_healthy = True
        health_results = []

        for worker in self.workers:
            try:
                health_info = self.check_worker_health(worker)
                health_results.append(health_info)

                if health_info['status'] != 'healthy':
                    all_healthy = False
                    logger.warning(
                        f"‚ö†Ô∏è  {worker.exchange_name.upper()}: {health_info['status']} - "
                        f"{', '.join(health_info['issues'])}"
                    )
                else:
                    logger.info(f"‚úÖ {worker.exchange_name.upper()}: –∑–¥–æ—Ä–æ–≤")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è {worker.exchange_name}: {e}")
                all_healthy = False

        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if all_healthy:
            logger.info("üéâ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –≤–æ—Ä–∫–µ—Ä–∞–º–∏")

        return health_results

    def get_system_summary(self) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å–≤–æ–¥–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ
        """
        now = datetime.now()
        summary = {
            'total_workers': len(self.workers),
            'running_workers': sum(1 for w in self.workers if w.is_running),
            'stopped_workers': sum(1 for w in self.workers if not w.is_running),
            'last_check': self.last_check_time,
            'uptime_hours': 0,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ uptime
            'exchanges': [w.exchange_name for w in self.workers]
        }

        return summary

    async def run_forever(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è."""
        self.is_running = True
        logger.info(f"üè• –ó–∞–ø—É—Å–∫ Health Monitor (–ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ {self.check_interval_minutes} –º–∏–Ω)")

        # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        await asyncio.sleep(60)

        while self.is_running:
            try:
                await self.perform_health_check()

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                for remaining in range(self.check_interval_minutes * 60, 0, -30):
                    if not self.is_running:
                        break
                    await asyncio.sleep(min(30, remaining))

            except asyncio.CancelledError:
                logger.info("Health Monitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ Health Monitor: {e}")
                await asyncio.sleep(60)

        self.is_running = False
        logger.info("Health Monitor –∑–∞–≤–µ—Ä—à–µ–Ω")

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è."""
        self.is_running = False