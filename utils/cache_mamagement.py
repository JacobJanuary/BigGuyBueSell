#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä.
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional

from database.manager import DatabaseManager
from database.pairs_cache import PairsCacheManager
from config.settings import MYSQL_CONFIG

logger = logging.getLogger(__name__)


class CacheManagementTool:
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º."""
        self.db_manager = None
        self.pairs_cache = None

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        self.db_manager = DatabaseManager()
        await self.db_manager.connect()
        self.pairs_cache = PairsCacheManager(self.db_manager.pool)

    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        if self.db_manager:
            await self.db_manager.close()

    async def show_cache_status(self, exchange: Optional[str] = None):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞.

        Args:
            exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ (–µ—Å–ª–∏ None, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ)
        """
        print("üìä –°–¢–ê–¢–£–° –ö–≠–®–ê –¢–û–†–ì–û–í–´–• –ü–ê–†")
        print("=" * 60)

        if exchange:
            exchanges = [exchange]
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∏—Ä–∂ –≤ –∫—ç—à–µ
            async with self.db_manager.pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute("SELECT DISTINCT exchange FROM trading_pairs_cache")
                    rows = await cursor.fetchall()
                    exchanges = [row[0] for row in rows] if rows else []

        if not exchanges:
            print("‚ùå –ö—ç—à –ø—É—Å—Ç")
            return

        for exchange_name in exchanges:
            stats = await self.pairs_cache.get_cache_stats(exchange_name)
            is_fresh = await self.pairs_cache.is_cache_fresh(exchange_name, 1)

            print(f"\nüè¶ {exchange_name.upper()}:")
            print(f"  –í—Å–µ–≥–æ –ø–∞—Ä: {stats['total_pairs']}")
            print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_pairs']}")
            print(f"  –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: ${stats['avg_volume']:,.0f}")
            print(f"  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats['last_update']}")
            print(f"  –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç—É–∞–ª–µ–Ω' if is_fresh else 'üî¥ –£—Å—Ç–∞—Ä–µ–ª'}")

    async def clear_cache(self, exchange: Optional[str] = None):
        """
        –û—á–∏—â–∞–µ—Ç –∫—ç—à.

        Args:
            exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ (–µ—Å–ª–∏ None, –æ—á–∏—â–∞–µ—Ç –≤—Å–µ)
        """
        if exchange:
            sql = "DELETE FROM trading_pairs_cache WHERE exchange = %s"
            params = (exchange,)
            print(f"–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è {exchange.upper()}...")
        else:
            sql = "DELETE FROM trading_pairs_cache"
            params = ()
            print("–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞...")

        async with self.db_manager.pool.acquire() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(sql, params)
                deleted_count = cursor.rowcount
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π")

    async def cleanup_old_cache(self, days: int = 7):
        """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞.

        Args:
            days: –í–æ–∑—Ä–∞—Å—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        """
        print(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")
        deleted_count = await self.pairs_cache.cleanup_old_cache(days)
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")

    async def force_update_cache(self, exchange: str):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–º–µ—á–∞–µ—Ç –∫—ç—à –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π.

        Args:
            exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
        """
        old_date = datetime.now() - timedelta(hours=25)  # –î–µ–ª–∞–µ–º —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è

        sql = """
              UPDATE trading_pairs_cache
              SET last_updated = %s
              WHERE exchange = %s \
              """

        async with self.db_manager.pool.acquire() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(sql, (old_date, exchange))
                updated_count = cursor.rowcount
                print(f"‚úÖ –ü–æ–º–µ—á–µ–Ω–æ {updated_count} –∑–∞–ø–∏—Å–µ–π {exchange.upper()} –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ")

    async def export_cache(self, exchange: Optional[str] = None, filename: Optional[str] = None):
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫—ç—à –≤ CSV —Ñ–∞–π–ª.

        Args:
            exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ (–µ—Å–ª–∏ None, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ)
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ None, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        """
        if not filename:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            exchange_suffix = f"_{exchange}" if exchange else "_all"
            filename = f"trading_pairs_cache{exchange_suffix}_{timestamp}.csv"

        if exchange:
            sql = """
                  SELECT exchange, \
                         symbol, \
                         base_asset, \
                         quote_asset, \
                         volume_24h_usd,
                         quote_price_usd, \
                         is_active, \
                         last_updated
                  FROM trading_pairs_cache
                  WHERE exchange = %s
                  ORDER BY volume_24h_usd DESC \
                  """
            params = (exchange,)
        else:
            sql = """
                  SELECT exchange, \
                         symbol, \
                         base_asset, \
                         quote_asset, \
                         volume_24h_usd,
                         quote_price_usd, \
                         is_active, \
                         last_updated
                  FROM trading_pairs_cache
                  ORDER BY exchange, volume_24h_usd DESC \
                  """
            params = ()

        async with self.db_manager.pool.acquire() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(sql, params)
                rows = await cursor.fetchall()

        if not rows:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ CSV
        with open(filename, 'w', encoding='utf-8') as f:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            f.write("exchange,symbol,base_asset,quote_asset,volume_24h_usd,quote_price_usd,is_active,last_updated\n")

            # –î–∞–Ω–Ω—ã–µ
            for row in rows:
                f.write(','.join(str(field) for field in row) + '\n')

        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π –≤ {filename}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è CLI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º."""
    import sys

    if len(sys.argv) < 2:
        print("""
–£—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python -m utils.cache_management status [–±–∏—Ä–∂–∞]     # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞
  python -m utils.cache_management clear [–±–∏—Ä–∂–∞]      # –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
  python -m utils.cache_management cleanup [–¥–Ω–∏]      # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
  python -m utils.cache_management force-update –±–∏—Ä–∂–∞ # –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π
  python -m utils.cache_management export [–±–∏—Ä–∂–∞]     # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV

–ü—Ä–∏–º–µ—Ä—ã:
  python -m utils.cache_management status
  python -m utils.cache_management status binance
  python -m utils.cache_management clear binance
  python -m utils.cache_management cleanup 30
  python -m utils.cache_management force-update coinbase
        """)
        return

    command = sys.argv[1]
    tool = CacheManagementTool()

    try:
        await tool.connect()

        if command == 'status':
            exchange = sys.argv[2] if len(sys.argv) > 2 else None
            await tool.show_cache_status(exchange)

        elif command == 'clear':
            exchange = sys.argv[2] if len(sys.argv) > 2 else None
            await tool.clear_cache(exchange)

        elif command == 'cleanup':
            days = int(sys.argv[2]) if len(sys.argv) > 2 else 7
            await tool.cleanup_old_cache(days)

        elif command == 'force-update':
            if len(sys.argv) < 3:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏")
                return
            exchange = sys.argv[2]
            await tool.force_update_cache(exchange)

        elif command == 'export':
            exchange = sys.argv[2] if len(sys.argv) > 2 else None
            await tool.export_cache(exchange)

        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

    finally:
        await tool.disconnect()


if __name__ == "__main__":
    asyncio.run(main())