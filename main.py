#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö.
–ö–∞–∂–¥–∞—è –±–∏—Ä–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–º —Ü–∏–∫–ª–µ.
"""
import asyncio
import logging
import os
import signal
import sys
from typing import List

import aiohttp
from aiohttp import TCPConnector

from config.settings import (
    MAX_WEIGHT_PER_MINUTE, DISABLE_SSL_VERIFY, EXCHANGES_CONFIG,
    STATS_REPORT_MINUTES, HEALTH_CHECK_MINUTES, LOG_LEVEL
)
from database.manager import DatabaseManager
from exchanges.binance.client import BinanceClient
from exchanges.binance.analyzer import BinanceAnalyzer
from exchanges.bybit.client import BybitClient
from exchanges.bybit.analyzer import BybitAnalyzer
from exchanges.coinbase.client import CoinbaseClient
from exchanges.coinbase.analyzer import CoinbaseAnalyzer
from utils.logger import setup_logging
from utils.rate_limiter import RateLimiter
from utils.ssl_helper import create_ssl_context
from workers.exchange_worker import ExchangeWorker
from utils.health_monitor import HealthMonitor
from workers.statistics_manager import StatisticsManager

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è graceful shutdown
workers: List[ExchangeWorker] = []
stats_manager: StatisticsManager = None
health_monitor: HealthMonitor = None
worker_tasks: List[asyncio.Task] = []


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã
    for worker in workers:
        worker.stop()

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if stats_manager:
        stats_manager.stop()

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º health monitor
    if health_monitor:
        health_monitor.stop()


async def setup_exchanges(session: aiohttp.ClientSession, db_manager: DatabaseManager) -> List[ExchangeWorker]:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂.

    Args:
        session: HTTP —Å–µ—Å—Å–∏—è
        db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Returns:
        –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
    """
    active_workers = []

    # –°–æ–∑–¥–∞–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
    for exchange_name, config in EXCHANGES_CONFIG.items():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –±–∏—Ä–∂–∏
        if not config.get('enabled', True):
            logger.info(f"‚èπÔ∏è  {exchange_name.upper()} –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            continue

        try:
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {exchange_name.upper()}...")
            logger.info(f"  –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏: {config['cycle_pause_minutes']} –º–∏–Ω")
            logger.info(f"  Rate limit: {config['rate_limit']} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω")
            logger.info(f"  –õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ –∑–∞–ø—Ä–æ—Å: {config['trades_limit']}")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏—Ä–∂–∏
            if exchange_name == 'binance':
                client = BinanceClient(session, RateLimiter(config['rate_limit']))
                analyzer = BinanceAnalyzer()
            elif exchange_name == 'bybit':
                client = BybitClient(session, RateLimiter(config['rate_limit']))
                analyzer = BybitAnalyzer()
            elif exchange_name == 'coinbase':
                client = CoinbaseClient(session, RateLimiter(config['rate_limit']))
                analyzer = CoinbaseAnalyzer()
            else:
                logger.warning(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∏—Ä–∂–∞: {exchange_name}")
                continue

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if await client.test_connection():
                # –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä
                worker = ExchangeWorker(
                    exchange_name=exchange_name,
                    client=client,
                    analyzer=analyzer,
                    db_manager=db_manager,
                    cycle_pause_minutes=config['cycle_pause_minutes']
                )

                active_workers.append(worker)
                logger.info(f"‚úÖ {exchange_name.upper()} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {exchange_name.upper()}")

        except KeyError as e:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {exchange_name}: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {exchange_name.upper()}: {e}")

    return active_workers


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    global workers, stats_manager, health_monitor, worker_tasks

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë      CRYPTO LARGE TRADES MONITOR v3.0             ‚ïë
    ‚ïë                                                   ‚ïë
    ‚ïë  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞—Ö       ‚ïë
    ‚ïë  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏: $49,000               ‚ïë
    ‚ïë  –†–µ–∂–∏–º: –ù–ï–ó–ê–í–ò–°–ò–ú–´–ï –¶–ò–ö–õ–´ –î–õ–Ø –ö–ê–ñ–î–û–ô –ë–ò–†–ñ–ò      ‚ïë
    ‚ïë  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–∏: Binance, Bybit, Coinbase  ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(level=LOG_LEVEL)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    db_manager = DatabaseManager()

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        await db_manager.connect()
        await db_manager.create_tables()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è SSL
        verify_ssl = not (os.environ.get('DISABLE_SSL_VERIFY', '').lower() == 'true')
        ssl_context = create_ssl_context(verify_ssl)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏—é
        timeout = aiohttp.ClientTimeout(total=30)
        connector = TCPConnector(
            ssl=ssl_context,
            limit=50,
            limit_per_host=10
        )

        async with aiohttp.ClientSession(
                connector=connector,
                timeout=timeout
        ) as session:

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã –±–∏—Ä–∂
            workers = await setup_exchanges(session, db_manager)

            if not workers:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∏ –æ–¥–Ω—É –±–∏—Ä–∂—É")
                return

            logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(workers)} –±–∏—Ä–∂: {[w.exchange_name for w in workers]}")
            print(f"SSL –ø—Ä–æ–≤–µ—Ä–∫–∞: {'–≤–∫–ª—é—á–µ–Ω–∞' if verify_ssl else '–û–¢–ö–õ–Æ–ß–ï–ù–ê'}")

            # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            stats_manager = StatisticsManager(db_manager, report_interval_minutes=STATS_REPORT_MINUTES)
            health_monitor = HealthMonitor(check_interval_minutes=HEALTH_CHECK_MINUTES)

            for worker in workers:
                stats_manager.register_worker(worker)
                health_monitor.register_worker(worker)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")

            worker_tasks = []

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã –±–∏—Ä–∂
            for worker in workers:
                task = asyncio.create_task(worker.run_forever())
                task.set_name(f"worker_{worker.exchange_name}")
                worker_tasks.append(task)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_task = asyncio.create_task(stats_manager.run_forever())
            stats_task.set_name("statistics_manager")
            worker_tasks.append(stats_task)

            # –ó–∞–ø—É—Å–∫–∞–µ–º health monitor
            health_task = asyncio.create_task(health_monitor.run_forever())
            health_task.set_name("health_monitor")
            worker_tasks.append(health_task)

            logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(worker_tasks)} –∑–∞–¥–∞—á (–≤–æ—Ä–∫–µ—Ä—ã + –º–µ–Ω–µ–¥–∂–µ—Ä—ã)")

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            try:
                await asyncio.gather(*worker_tasks)
            except asyncio.CancelledError:
                logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")

    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # Graceful shutdown
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
        for worker in workers:
            worker.stop()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        if stats_manager:
            stats_manager.stop()

        if health_monitor:
            health_monitor.stop()

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in worker_tasks:
            if not task.done():
                task.cancel()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        if worker_tasks:
            try:
                await asyncio.wait_for(
                    asyncio.gather(*worker_tasks, return_exceptions=True),
                    timeout=10.0
                )
            except asyncio.TimeoutError:
                logger.warning("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
        await db_manager.close()
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)