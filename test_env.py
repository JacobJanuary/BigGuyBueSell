#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""
import os
from dotenv import load_dotenv


def test_env_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    else:
        print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env
    load_dotenv()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    test_vars = [
        'MYSQL_HOST', 'MYSQL_PASSWORD', 'MYSQL_DATABASE',
        'BINANCE_CYCLE_MINUTES', 'BYBIT_CYCLE_MINUTES', 'COINBASE_CYCLE_MINUTES',
        'LOG_LEVEL', 'DISABLE_SSL_VERIFY',
        'MIN_VOLUME_USD', 'MIN_TRADE_VALUE_USD',
        'BINANCE_ENABLED', 'BYBIT_ENABLED', 'COINBASE_ENABLED'
    ]

    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env:")
    found_vars = []
    missing_vars = []

    for var in test_vars:
        value = os.getenv(var)
        if value is not None:
            if 'PASSWORD' in var:
                display_value = '***' if value else '–ü–£–°–¢–û–ô'
            else:
                display_value = value
            print(f"  ‚úÖ {var} = {display_value}")
            found_vars.append(var)
        else:
            print(f"  ‚ùå {var} = –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
            missing_vars.append(var)

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"  –ù–∞–π–¥–µ–Ω–æ: {len(found_vars)} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
    print(f"  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(missing_vars)} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")

    if missing_vars:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
        for var in missing_vars:
            print(f"    {var}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    try:
        from config.settings import EXCHANGES_CONFIG, LOG_LEVEL, MIN_VOLUME_USD

        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
        print(f"  LOG_LEVEL: {LOG_LEVEL}")
        print(f"  MIN_VOLUME_USD: ${MIN_VOLUME_USD:,}")

        print(f"\nüè¶ –°—Ç–∞—Ç—É—Å –±–∏—Ä–∂:")
        for exchange, config in EXCHANGES_CONFIG.items():
            status = "–í–ö–õ–Æ–ß–ï–ù–ê" if config.get('enabled', True) else "–û–¢–ö–õ–Æ–ß–ï–ù–ê"
            cycle_pause = config.get('cycle_pause_minutes', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
            rate_limit = config.get('rate_limit', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
            print(f"  {exchange.upper()}: {status}")
            print(f"    –ü–∞—É–∑–∞: {cycle_pause}–º–∏–Ω")
            print(f"    Rate limit: {rate_limit}/–º–∏–Ω")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        import traceback
        print(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        traceback.print_exc()
        return False


def test_specific_setting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É."""
    print(f"\nüéØ –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∏—Ä–∂...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±–µ—Ä—É—Ç—Å—è –∏–∑ .env
    test_cases = [
        ('BINANCE_CYCLE_MINUTES', 'Binance cycle pause'),
        ('COINBASE_RATE_LIMIT', 'Coinbase rate limit'),
        ('LOG_LEVEL', 'Log level'),
    ]

    for env_var, description in test_cases:
        env_value = os.getenv(env_var)
        if env_value:
            print(f"  ‚úÖ {description}: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {env_var}={env_value} –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        else:
            print(f"  ‚ö†Ô∏è  {description}: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {env_var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")


if __name__ == "__main__":
    success = test_env_loading()
    test_specific_setting()

    if success:
        print(f"\nüéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print(f"\nüí• –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

    print(f"\nüí° –°–æ–≤–µ—Ç: –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è:")
    print(f"   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª .env –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
    print(f"   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ .env (–ù–ï–¢ –ø—Ä–æ–±–µ–ª–æ–≤ –≤–æ–∫—Ä—É–≥ =)")
    print(f"   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã (#)")
    print(f"   4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è .env")