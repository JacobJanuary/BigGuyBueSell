#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è Bybit API v5.
–ò—Å—Å–ª–µ–¥—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, –ª–∏–º–∏—Ç—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫.
"""
import asyncio
import json
import logging
import ssl
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Set
import time

import aiohttp
from aiohttp import ClientSession, TCPConnector

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ certifi –¥–ª—è SSL
try:
    import certifi

    HAS_CERTIFI = True
except ImportError:
    HAS_CERTIFI = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class BybitAPITester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è Bybit API."""

    def __init__(self, disable_ssl_verify: bool = False):
        self.base_url = "https://api.bybit.com"
        self.session: Optional[ClientSession] = None
        self.test_symbols = ['BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'ADAUSDT', 'DOGEUSDT']
        self.disable_ssl_verify = disable_ssl_verify

    def create_ssl_context(self) -> ssl.SSLContext:
        """–°–æ–∑–¥–∞–µ—Ç SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏."""
        if self.disable_ssl_verify:
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            print("‚ö†Ô∏è  SSL –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
            return ssl_context
        else:
            ssl_context = ssl.create_default_context()
            try:
                if HAS_CERTIFI:
                    ssl_context.load_verify_locations(certifi.where())
                    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã certifi")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã certifi: {e}")
            return ssl_context

    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥."""
        ssl_context = self.create_ssl_context()
        connector = TCPConnector(
            limit=20,
            limit_per_host=10,
            ssl=ssl_context
        )
        timeout = aiohttp.ClientTimeout(total=30)
        self.session = ClientSession(connector=connector, timeout=timeout)
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥."""
        if self.session:
            await self.session.close()

    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API."""
        try:
            url = f"{self.base_url}/v5/market/time"
            async with self.session.get(url) as response:
                data = await response.json()
                if data.get('retCode') == 0:
                    server_time = int(data['result']['timeSecond'])
                    local_time = int(time.time())
                    time_diff = abs(server_time - local_time)

                    print(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Bybit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    print(f"   –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.fromtimestamp(server_time)}")
                    print(f"   –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {datetime.fromtimestamp(local_time)}")
                    print(f"   –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: {time_diff} —Å–µ–∫—É–Ω–¥")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {data}")
                    return False
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")
            return False

    async def analyze_instruments(self) -> None:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö."""
        print(f"\n{'=' * 60}")
        print("üîç –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
        print(f"{'=' * 60}")

        try:
            url = f"{self.base_url}/v5/market/instruments-info"
            params = {'category': 'spot'}

            async with self.session.get(url, params=params) as response:
                data = await response.json()

                if data.get('retCode') != 0:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {data}")
                    return

                instruments = data['result']['list']
                print(f"üìä –í—Å–µ–≥–æ —Å–ø–æ—Ç–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(instruments)}")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
                statuses = {}
                for instrument in instruments:
                    status = instrument.get('status', 'Unknown')
                    statuses[status] = statuses.get(status, 0) + 1

                print(f"\nüìà –°—Ç–∞—Ç—É—Å—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
                for status, count in statuses.items():
                    print(f"   {status}: {count}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                if instruments:
                    print(f"\nüî¨ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–ø—Ä–∏–º–µ—Ä {instruments[0]['symbol']}):")
                    sample = instruments[0]
                    for key, value in sample.items():
                        print(f"   {key}: {value} ({type(value).__name__})")

                # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã —Å –±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º
                trading_pairs = [
                    instr for instr in instruments
                    if instr.get('status') == 'Trading'
                ]
                print(f"\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {len(trading_pairs)}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")

    async def analyze_tickers(self) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–∫–µ—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø —Å–∏–º–≤–æ–ª—ã –ø–æ –æ–±—ä–µ–º—É."""
        print(f"\n{'=' * 60}")
        print("üìä –ê–ù–ê–õ–ò–ó 24HR –¢–ò–ö–ï–†–û–í")
        print(f"{'=' * 60}")

        try:
            url = f"{self.base_url}/v5/market/tickers"
            params = {'category': 'spot'}

            async with self.session.get(url, params=params) as response:
                data = await response.json()

                if data.get('retCode') != 0:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤: {data}")
                    return []

                tickers = data['result']['list']
                print(f"üìà –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(tickers)}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∏–∫–µ—Ä–∞
                if tickers:
                    print(f"\nüî¨ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∏–∫–µ—Ä–∞ (–ø—Ä–∏–º–µ—Ä {tickers[0]['symbol']}):")
                    sample = tickers[0]
                    for key, value in sample.items():
                        print(f"   {key}: {value} ({type(value).__name__})")

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
                volume_tickers = []
                for ticker in tickers:
                    try:
                        volume = float(ticker.get('turnover24h', '0'))
                        if volume > 0:
                            volume_tickers.append((ticker['symbol'], volume))
                    except (ValueError, TypeError):
                        continue

                volume_tickers.sort(key=lambda x: x[1], reverse=True)

                print(f"\nüî• –¢–æ–ø-10 –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤ (24h):")
                top_symbols = []
                for i, (symbol, volume) in enumerate(volume_tickers[:10], 1):
                    print(f"   {i:2d}. {symbol}: ${volume:,.0f}")
                    top_symbols.append(symbol)

                return top_symbols[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5 –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–∏–∫–µ—Ä–æ–≤: {e}")
            return []

    async def test_recent_trades_limits(self, symbol: str) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–∏–º–∏—Ç—ã recent trades –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞."""
        print(f"\n{'=' * 60}")
        print(f"üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–ò–ú–ò–¢–û–í –°–î–ï–õ–û–ö –î–õ–Ø {symbol}")
        print(f"{'=' * 60}")

        results = {}

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        limits_to_test = [1, 10, 50, 60, 100, 500, 1000]

        for limit in limits_to_test:
            try:
                url = f"{self.base_url}/v5/market/recent-trade"
                params = {
                    'category': 'spot',
                    'symbol': symbol,
                    'limit': limit
                }

                start_time = time.time()
                async with self.session.get(url, params=params) as response:
                    request_time = time.time() - start_time
                    data = await response.json()

                    if data.get('retCode') == 0:
                        trades = data['result']['list']
                        actual_count = len(trades)
                        results[limit] = {
                            'requested': limit,
                            'received': actual_count,
                            'request_time': request_time,
                            'success': True
                        }
                        print(f"   –õ–∏–º–∏—Ç {limit:4d}: –ø–æ–ª—É—á–µ–Ω–æ {actual_count:4d} —Å–¥–µ–ª–æ–∫ –∑–∞ {request_time:.3f}—Å")

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π —Å–¥–µ–ª–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                        if limit == limits_to_test[0] and trades:
                            print(f"\nüî¨ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–¥–µ–ª–∫–∏:")
                            sample_trade = trades[0]
                            for key, value in sample_trade.items():
                                print(f"   {key}: {value} ({type(value).__name__})")
                    else:
                        results[limit] = {
                            'requested': limit,
                            'received': 0,
                            'request_time': request_time,
                            'success': False,
                            'error': data.get('retMsg', 'Unknown error')
                        }
                        print(f"   –õ–∏–º–∏—Ç {limit:4d}: –û–®–ò–ë–ö–ê - {data.get('retMsg', 'Unknown')}")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.1)

            except Exception as e:
                results[limit] = {
                    'requested': limit,
                    'received': 0,
                    'request_time': 0,
                    'success': False,
                    'error': str(e)
                }
                print(f"   –õ–∏–º–∏—Ç {limit:4d}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ª–∏–º–∏—Ç
        max_working_limit = 0
        for limit, result in results.items():
            if result['success'] and result['received'] > 0:
                max_working_limit = max(max_working_limit, limit)

        print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –õ–ò–ú–ò–¢–û–í:")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ª–∏–º–∏—Ç: {max_working_limit}")

        return results

    async def test_trade_history_methods(self, symbol: str) -> None:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫."""
        print(f"\n{'=' * 60}")
        print(f"üìú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–û–í –ò–°–¢–û–†–ò–ò –°–î–ï–õ–û–ö –î–õ–Ø {symbol}")
        print(f"{'=' * 60}")

        # –ú–µ—Ç–æ–¥ 1: recent-trade (—Å–∞–º—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ)
        print(f"\n1Ô∏è‚É£ –ú–µ—Ç–æ–¥ recent-trade:")
        try:
            url = f"{self.base_url}/v5/market/recent-trade"
            params = {'category': 'spot', 'symbol': symbol, 'limit': 60}

            async with self.session.get(url, params=params) as response:
                data = await response.json()
                if data.get('retCode') == 0:
                    trades = data['result']['list']
                    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫")
                    if trades:
                        oldest_time = min(int(trade['time']) for trade in trades)
                        newest_time = max(int(trade['time']) for trade in trades)
                        print(f"   üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:")
                        print(f"      –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è: {datetime.fromtimestamp(oldest_time / 1000)}")
                        print(f"      –°–∞–º–∞—è –Ω–æ–≤–∞—è:  {datetime.fromtimestamp(newest_time / 1000)}")
                        print(f"      –î–∏–∞–ø–∞–∑–æ–Ω: {(newest_time - oldest_time) / 1000:.1f} —Å–µ–∫—É–Ω–¥")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {data}")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ endpoints –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        endpoints_to_test = [
            '/v5/market/trade',
            '/v5/market/history-trade',
            '/v5/market/kline'  # –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        ]

        for endpoint in endpoints_to_test:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint {endpoint}:")
            try:
                url = f"{self.base_url}{endpoint}"
                params = {'category': 'spot', 'symbol': symbol}

                async with self.session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        print(f"   ‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω: {data.get('retCode') == 0}")
                        if data.get('retCode') == 0:
                            result = data.get('result', {})
                            if isinstance(result, dict):
                                for key, value in result.items():
                                    if isinstance(value, list):
                                        print(f"      {key}: {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                                    else:
                                        print(f"      {key}: {type(value).__name__}")
                    else:
                        print(f"   ‚ùå HTTP {response.status}")
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

    async def test_pagination_and_timing(self, symbol: str) -> None:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
        print(f"\n{'=' * 60}")
        print(f"‚è∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ì–ò–ù–ê–¶–ò–ò –ò –í–†–ï–ú–ï–ù–ò –î–õ–Ø {symbol}")
        print(f"{'=' * 60}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Ä—Ü–∏—é —Å–¥–µ–ª–æ–∫
            url = f"{self.base_url}/v5/market/recent-trade"
            params = {'category': 'spot', 'symbol': symbol, 'limit': 60}

            async with self.session.get(url, params=params) as response:
                data = await response.json()

                if data.get('retCode') != 0:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {data}")
                    return

                trades = data['result']['list']
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–∞ –ø–µ—Ä–≤–∞—è –ø–æ—Ä—Ü–∏—è: {len(trades)} —Å–¥–µ–ª–æ–∫")

                if not trades:
                    print(f"‚ùå –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    return

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                times = [int(trade['time']) for trade in trades]
                times.sort()

                oldest_trade_time = times[0]
                newest_trade_time = times[-1]

                print(f"üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑:")
                print(f"   –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è —Å–¥–µ–ª–∫–∞: {datetime.fromtimestamp(oldest_trade_time / 1000)}")
                print(f"   –°–∞–º–∞—è –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞:  {datetime.fromtimestamp(newest_trade_time / 1000)}")
                print(f"   –í—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ö–≤–∞—Ç: {(newest_trade_time - oldest_trade_time) / 1000:.1f} —Å–µ–∫—É–Ω–¥")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID —Å–¥–µ–ª–æ–∫
                trade_ids = [trade.get('execId', trade.get('id', '')) for trade in trades]
                unique_ids = set(trade_ids)
                print(f"üÜî –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID: {len(unique_ids)}/{len(trade_ids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –∏ —Ü–µ–Ω—ã
                volumes = []
                prices = []
                for trade in trades:
                    try:
                        volume = float(trade.get('size', 0)) * float(trade.get('price', 0))
                        volumes.append(volume)
                        prices.append(float(trade.get('price', 0)))
                    except (ValueError, TypeError):
                        continue

                if volumes:
                    print(f"üí∞ –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤:")
                    print(f"   –ú–∏–Ω. –æ–±—ä–µ–º —Å–¥–µ–ª–∫–∏: ${min(volumes):,.2f}")
                    print(f"   –ú–∞–∫—Å. –æ–±—ä–µ–º —Å–¥–µ–ª–∫–∏: ${max(volumes):,.2f}")
                    print(f"   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: ${sum(volumes) / len(volumes):,.2f}")

                    # –ù–∞—Ö–æ–¥–∏–º –∫—Ä—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                    large_trades = [v for v in volumes if v >= 10000]  # $10k+
                    if large_trades:
                        print(f"   –°–¥–µ–ª–∫–∏ $10k+: {len(large_trades)} ({len(large_trades) / len(volumes) * 100:.1f}%)")
                        print(f"   –ö—Ä—É–ø–Ω–µ–π—à–∞—è —Å–¥–µ–ª–∫–∞: ${max(large_trades):,.2f}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")

    async def test_rate_limits(self) -> None:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç rate limits API."""
        print(f"\n{'=' * 60}")
        print("‚ö° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RATE LIMITS")
        print(f"{'=' * 60}")

        test_symbol = 'BTCUSDT'
        requests_per_batch = 10
        batches_to_test = 3

        for batch in range(batches_to_test):
            print(f"\nüìä –ë–∞—Ç—á #{batch + 1}: {requests_per_batch} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥")

            start_time = time.time()
            success_count = 0
            error_count = 0

            tasks = []
            for i in range(requests_per_batch):
                task = self._single_trade_request(test_symbol, i)
                tasks.append(task)

            results = await asyncio.gather(*tasks, return_exceptions=True)

            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    print(f"   –ó–∞–ø—Ä–æ—Å {i + 1:2d}: ‚ùå {result}")
                    error_count += 1
                elif result['success']:
                    print(f"   –ó–∞–ø—Ä–æ—Å {i + 1:2d}: ‚úÖ {result['trades_count']} —Å–¥–µ–ª–æ–∫ –∑–∞ {result['time']:.3f}—Å")
                    success_count += 1
                else:
                    print(f"   –ó–∞–ø—Ä–æ—Å {i + 1:2d}: ‚ùå {result['error']}")
                    error_count += 1

            batch_time = time.time() - start_time
            print(f"   üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∞—Ç—á–∞: {success_count} —É—Å–ø–µ—à–Ω—ã—Ö, {error_count} –æ—à–∏–±–æ–∫ –∑–∞ {batch_time:.2f}—Å")

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            if batch < batches_to_test - 1:
                print(f"   ‚è∏Ô∏è –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)

    async def _single_trade_request(self, symbol: str, request_id: int) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —Å–¥–µ–ª–æ–∫."""
        try:
            start_time = time.time()
            url = f"{self.base_url}/v5/market/recent-trade"
            params = {'category': 'spot', 'symbol': symbol, 'limit': 10}

            async with self.session.get(url, params=params) as response:
                request_time = time.time() - start_time
                data = await response.json()

                if data.get('retCode') == 0:
                    trades_count = len(data['result']['list'])
                    return {
                        'success': True,
                        'trades_count': trades_count,
                        'time': request_time,
                        'request_id': request_id
                    }
                else:
                    return {
                        'success': False,
                        'error': data.get('retMsg', 'Unknown error'),
                        'time': request_time,
                        'request_id': request_id
                    }
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'time': 0,
                'request_id': request_id
            }

    async def generate_recommendations(self, test_results: Dict) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        print(f"\n{'=' * 60}")
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
        print(f"{'=' * 60}")

        print(f"1Ô∏è‚É£ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫: 60 (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ)")
        print(f"   ‚Ä¢ Endpoint –¥–ª—è —Å–¥–µ–ª–æ–∫: /v5/market/recent-trade")
        print(f"   ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: category='spot', symbol, limit")

        print(f"\n2Ô∏è‚É£ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫:")
        print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏–º–∏—Ç 60 –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞")
        print(f"   ‚Ä¢ –î–µ–ª–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∫–∞–∂–¥—ã–µ 30-60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä")
        print(f"   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ execId")
        print(f"   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö")

        print(f"\n3Ô∏è‚É£ Rate limiting:")
        print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—É–∑—ã 0.1-0.2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
        print(f"   ‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—à–∏–±–∫–∏ 403 (rate limit exceeded)")
        print(f"   ‚Ä¢ –†–µ–∞–ª–∏–∑—É–π—Ç–µ exponential backoff –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")

        print(f"\n4Ô∏è‚É£ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:")
        print(f"   ‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç–æ–ø-20 –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É")
        print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –æ–±—ä–µ–º—É USD")
        print(f"   ‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —á—Ç–æ recent-trade –¥–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é")

        print(f"\n5Ô∏è‚É£ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π rate limiter –¥–ª—è Bybit")
        print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ semaphore –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        print(f"   ‚Ä¢ –†–µ–∞–ª–∏–∑—É–π—Ç–µ retry –ª–æ–≥–∏–∫—É —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π")
        print(f"   ‚Ä¢ –õ–æ–≥–∏—Ä—É–π—Ç–µ –≤—Å–µ –æ—à–∏–±–∫–∏ API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë            BYBIT API ADVANCED TESTER              ‚ïë
    ‚ïë                                                   ‚ïë
    ‚ïë  –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏    ‚ïë
    ‚ïë  —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π SSL
    print("üîê –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π SSL...")
    async with BybitAPITester(disable_ssl_verify=False) as tester:
        if await tester.test_connection():
            ssl_works = True
        else:
            ssl_works = False

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ SSL –ø—Ä–æ–≤–µ—Ä–∫–∏
    if not ssl_works:
        print("\n‚ö†Ô∏è  SSL –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
        print("   (–¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è! –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø—Ä–∞–≤—å—Ç–µ SSL)")

        async with BybitAPITester(disable_ssl_verify=True) as tester:
            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if not await tester.test_connection():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –¥–∞–∂–µ –±–µ–∑ SSL. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
                print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ certifi: pip install certifi")
                print("   2. –û–±–Ω–æ–≤–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–∏—Å—Ç–µ–º—ã")
                print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏/firewall")
                print("   4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –µ—Å–ª–∏ API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ")
                return

            await run_all_tests(tester)
    else:
        # SSL —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        print("‚úÖ SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        async with BybitAPITester(disable_ssl_verify=False) as tester:
            await run_all_tests(tester)


async def run_all_tests(tester):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
    # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    await tester.analyze_instruments()

    # –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ —Ç–∏–∫–µ—Ä–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Å–∏–º–≤–æ–ª–æ–≤
    top_symbols = await tester.analyze_tickers()

    if not top_symbols:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ç–æ–ø —Å–∏–º–≤–æ–ª–∞
    test_results = await tester.test_recent_trades_limits(top_symbols[0])

    # –¢–µ—Å—Ç 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
    await tester.test_trade_history_methods(top_symbols[0])

    # –¢–µ—Å—Ç 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
    await tester.test_pagination_and_timing(top_symbols[0])

    # –¢–µ—Å—Ç 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limits
    await tester.test_rate_limits()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    await tester.generate_recommendations(test_results)

    print(f"\n{'=' * 60}")
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print(f"{'=' * 60}")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ BybitClient")


if __name__ == "__main__":
    asyncio.run(main())