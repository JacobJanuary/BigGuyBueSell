"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏ —Å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
workers/optimized_exchange_worker.py
"""
import asyncio
import logging
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional
import time

from config.settings import MIN_TRADE_VALUE_USD, BATCH_SIZE, MAX_CONCURRENT_REQUESTS
from database.manager import DatabaseManager
from database.pairs_cache import PairsCacheManager
from database.models import Trade, TradingPairInfo

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
MEMORY_CACHE_TTL_MINUTES = 30  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ in-memory –∫—ç—à–∞
API_UPDATE_INTERVAL_MINUTES = 60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
FALLBACK_CACHE_TTL_HOURS = 4  # TTL –¥–ª—è fallback –∫—ç—à–∞ –≤ –ë–î


class OptimizedExchangeWorker:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä —Å —É–º–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ API –≤—ã–∑–æ–≤–∞–º–∏."""

    def __init__(
            self,
            exchange_name: str,
            client,
            analyzer,
            db_manager: DatabaseManager,
            cycle_pause_minutes: int = 5
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –±–∏—Ä–∂–∏.

        Args:
            exchange_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            client: –ö–ª–∏–µ–Ω—Ç API –±–∏—Ä–∂–∏
            analyzer: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂–∏
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cycle_pause_minutes: –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        self.exchange_name = exchange_name
        self.client = client
        self.analyzer = analyzer
        self.db_manager = db_manager
        self.cycle_pause_minutes = cycle_pause_minutes
        self.semaphore = asyncio.Semaphore(MAX_CONCURRENT_REQUESTS)

        # –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        self.pairs_cache = PairsCacheManager(db_manager.pool)

        # In-memory –∫—ç—à –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self._memory_cache = {
            'pairs': None,
            'loaded_at': None,
            'last_api_update': None,
            'source': None  # 'api', 'db', 'fallback'
        }

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.stats = {
            'cycle_count': 0,
            'total_trades_found': 0,
            'total_trades_saved': 0,
            'cache_hits': 0,
            'cache_misses': 0,
            'api_calls': 0,
            'db_queries': 0,
            'memory_cache_hits': 0,
            'db_cache_hits': 0,
            'api_updates': 0,
            'fallback_uses': 0
        }

        self.is_running = False

    def _is_memory_cache_valid(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å in-memory –∫—ç—à–∞.

        Returns:
            True –µ—Å–ª–∏ in-memory –∫—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω
        """
        if not self._memory_cache['pairs'] or not self._memory_cache['loaded_at']:
            return False

        cache_age_seconds = time.time() - self._memory_cache['loaded_at']
        max_age_seconds = MEMORY_CACHE_TTL_MINUTES * 60

        return cache_age_seconds < max_age_seconds

    def _should_update_from_api(self) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫—ç—à —á–µ—Ä–µ–∑ API.

        Returns:
            True –µ—Å–ª–∏ –ø–æ—Ä–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫—ç—à —á–µ—Ä–µ–∑ API
        """
        if not self._memory_cache['last_api_update']:
            return True

        time_since_api_update = time.time() - self._memory_cache['last_api_update']
        api_update_interval = API_UPDATE_INTERVAL_MINUTES * 60

        return time_since_api_update >= api_update_interval

    async def _load_pairs_from_memory(self) -> Optional[List[TradingPairInfo]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ä—ã –∏–∑ in-memory –∫—ç—à–∞.

        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–ª–∏ None
        """
        if self._is_memory_cache_valid():
            self.stats['memory_cache_hits'] += 1
            self.stats['cache_hits'] += 1

            cache_age = (time.time() - self._memory_cache['loaded_at']) / 60
            logger.debug(
                f"[{self.exchange_name.upper()}] Memory –∫—ç—à: {len(self._memory_cache['pairs'])} –ø–∞—Ä, "
                f"–≤–æ–∑—Ä–∞—Å—Ç {cache_age:.1f}–º–∏–Ω, –∏—Å—Ç–æ—á–Ω–∏–∫: {self._memory_cache['source']}"
            )
            return self._memory_cache['pairs']

        return None

    async def _load_pairs_from_db(self) -> Optional[List[TradingPairInfo]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ä—ã –∏–∑ –ë–î –∫—ç—à–∞.

        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–ª–∏ None
        """
        try:
            self.stats['db_queries'] += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ë–î –∫—ç—à–∞
            cache_fresh = await self.pairs_cache.is_cache_fresh(
                self.exchange_name,
                max_age_hours=2  # –ë–æ–ª–µ–µ —â–∞–¥—è—â–∏–π TTL –¥–ª—è –ë–î –∫—ç—à–∞
            )

            if cache_fresh:
                pairs = await self.pairs_cache.get_cached_pairs(self.exchange_name)
                if pairs:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ memory –∫—ç—à
                    self._memory_cache.update({
                        'pairs': pairs,
                        'loaded_at': time.time(),
                        'source': 'db'
                    })

                    self.stats['db_cache_hits'] += 1
                    self.stats['cache_hits'] += 1

                    logger.info(
                        f"[{self.exchange_name.upper()}] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(pairs)} –ø–∞—Ä –∏–∑ –ë–î –∫—ç—à–∞"
                    )
                    return pairs

            return None

        except Exception as e:
            logger.error(f"[{self.exchange_name.upper()}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î –∫—ç—à–∞: {e}")
            return None

    async def _update_pairs_from_api(self) -> Optional[List[TradingPairInfo]]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä—ã —á–µ—Ä–µ–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à.

        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–ª–∏ None
        """
        try:
            logger.info(f"[{self.exchange_name.upper()}] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ API...")

            self.stats['api_calls'] += 2  # exchange_info + tickers
            self.stats['api_updates'] += 1

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏—Ä–∂–∏
            if self.exchange_name == 'binance':
                exchange_info = await self.client.get_exchange_info()
                tickers = await self.client.get_24hr_tickers()
                filtered_pairs = self.analyzer.filter_trading_pairs(exchange_info, tickers)
            elif self.exchange_name == 'bybit':
                exchange_info = await self.client.get_instruments_info()
                tickers = await self.client.get_24hr_tickers()
                filtered_pairs = self.analyzer.filter_trading_pairs(exchange_info, tickers)
            elif self.exchange_name == 'coinbase':
                products_info = await self.client.get_products_info()
                tickers = await self.client.get_24hr_tickers()
                filtered_pairs = self.analyzer.filter_trading_pairs(products_info, tickers)
            else:
                logger.error(f"[{self.exchange_name.upper()}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∏—Ä–∂–∞ –¥–ª—è API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return None

            if not filtered_pairs:
                logger.warning(f"[{self.exchange_name.upper()}] API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
                return None

            # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î –∫—ç—à
            added, updated, deactivated = await self.pairs_cache.update_pairs_cache(
                self.exchange_name,
                filtered_pairs
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º memory –∫—ç—à
            self._memory_cache.update({
                'pairs': filtered_pairs,
                'loaded_at': time.time(),
                'last_api_update': time.time(),
                'source': 'api'
            })

            logger.info(
                f"[{self.exchange_name.upper()}] ‚úÖ API –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: "
                f"+{added} ~{updated} -{deactivated}, –∏—Ç–æ–≥–æ {len(filtered_pairs)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä"
            )

            return filtered_pairs

        except Exception as e:
            logger.error(f"[{self.exchange_name.upper()}] ‚ùå –û—à–∏–±–∫–∞ API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return None

    async def get_trading_pairs(self) -> Optional[List[TradingPairInfo]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

        –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
        1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å in-memory –∫—ç—à
        2. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ API –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –æ–±–Ω–æ–≤–∏—Ç—å
        3. –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î –∫—ç—à–∞
        4. Fallback –∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–º—É –∫—ç—à—É

        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º memory –∫—ç—à
        pairs = await self._load_pairs_from_memory()
        if pairs:
            return pairs

        # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ API –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        should_update_api = self._should_update_from_api()

        if should_update_api:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ API
            pairs = await self._update_pairs_from_api()
            if pairs:
                return pairs
            else:
                logger.warning(
                    f"[{self.exchange_name.upper()}] ‚ö†Ô∏è  API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, "
                    f"–ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î –∫—ç—à"
                )

        # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î –∫—ç—à–∞
        pairs = await self._load_pairs_from_db()
        if pairs:
            return pairs

        # 4. Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
        if self._memory_cache['pairs']:
            self.stats['fallback_uses'] += 1
            cache_age = (time.time() - self._memory_cache['loaded_at']) / 3600

            logger.warning(
                f"[{self.exchange_name.upper()}] üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à "
                f"(–≤–æ–∑—Ä–∞—Å—Ç {cache_age:.1f}—á)"
            )
            return self._memory_cache['pairs']

        # 5. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ API –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.stats['cache_misses'] += 1
        logger.error(f"[{self.exchange_name.upper()}] üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ API –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        return await self._update_pairs_from_api()

    async def process_pair(self, pair_info: TradingPairInfo) -> List[Trade]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É.

        Args:
            pair_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ

        Returns:
            –°–ø–∏—Å–æ–∫ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        """
        async with self.semaphore:
            try:
                trades_data = await self.client.get_recent_trades(pair_info.symbol)
                if not trades_data:
                    return []

                large_trades = []
                for trade_data in trades_data:
                    trade = await self.client.parse_trade(trade_data, pair_info)

                    if trade.value_usd >= Decimal(str(MIN_TRADE_VALUE_USD)):
                        large_trades.append(trade)

                return large_trades

            except Exception as e:
                logger.debug(f"[{self.exchange_name.upper()}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {pair_info.symbol}: {e}")
                return []

    def _get_cache_efficiency_report(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∞."""
        total_cache_ops = self.stats['cache_hits'] + self.stats['cache_misses']
        hit_rate = (self.stats['cache_hits'] / total_cache_ops * 100) if total_cache_ops > 0 else 0

        return (
            f"–ö—ç—à: {hit_rate:.1f}% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, "
            f"memory:{self.stats['memory_cache_hits']}, "
            f"db:{self.stats['db_cache_hits']}, "
            f"API:{self.stats['api_updates']}, "
            f"fallback:{self.stats['fallback_uses']}"
        )

    async def run_cycle(self) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏—Ä–∂–∏.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ü–∏–∫–ª–∞
        """
        self.stats['cycle_count'] += 1
        cycle_start = time.time()

        logger.info(f"[{self.exchange_name.upper()}] üîÑ –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ #{self.stats['cycle_count']}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            trading_pairs = await self.get_trading_pairs()
            if not trading_pairs:
                logger.warning(f"[{self.exchange_name.upper()}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")
                return self._create_error_result(cycle_start, "–ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
            trading_pairs.sort(key=lambda x: x.volume_24h_usd, reverse=True)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ –∏ —Ç–æ–ø-5 –ø–∞—Ä
            cache_report = self._get_cache_efficiency_report()
            logger.info(f"[{self.exchange_name.upper()}] üìä {cache_report}")

            logger.info(f"[{self.exchange_name.upper()}] üèÜ –¢–æ–ø-5 –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É:")
            for i, pair in enumerate(trading_pairs[:5], 1):
                logger.info(f"  {i}. {pair.symbol}: ${pair.volume_24h_usd:,.0f}")

            cycle_trades_found = 0
            cycle_trades_saved = 0
            cycle_duplicates = 0

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—ã –±–∞—Ç—á–∞–º–∏
            for i in range(0, len(trading_pairs), BATCH_SIZE):
                batch = trading_pairs[i:i + BATCH_SIZE]

                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –±–∞—Ç—á–∞
                tasks = [
                    self.process_pair(pair_info)
                    for pair_info in batch
                ]

                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                results = await asyncio.gather(*tasks, return_exceptions=True)

                batch_trades = []
                for result in results:
                    if isinstance(result, Exception):
                        logger.debug(f"[{self.exchange_name.upper()}] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä—ã: {result}")
                        continue
                    batch_trades.extend(result)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                if batch_trades:
                    new_count, dup_count = await self.db_manager.save_trades(batch_trades)
                    cycle_trades_saved += new_count
                    cycle_duplicates += dup_count
                    cycle_trades_found += len(batch_trades)

                # –ü—Ä–æ–≥—Ä–µ—Å—Å
                processed = min(i + BATCH_SIZE, len(trading_pairs))
                if len(batch_trades) > 0:
                    logger.info(
                        f"[{self.exchange_name.upper()}] üìà {processed}/{len(trading_pairs)} –ø–∞—Ä | "
                        f"–ù–∞–π–¥–µ–Ω–æ: {len(batch_trades)} | –ù–æ–≤—ã—Ö: {new_count} | –î—É–±–ª–∏: {dup_count}"
                    )

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if i + BATCH_SIZE < len(trading_pairs):
                    await asyncio.sleep(0.5)

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['total_trades_found'] += cycle_trades_found
            self.stats['total_trades_saved'] += cycle_trades_saved

            cycle_duration = time.time() - cycle_start

            logger.info(
                f"[{self.exchange_name.upper()}] ‚úÖ –¶–∏–∫–ª #{self.stats['cycle_count']} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration:.1f}—Å | "
                f"–ù–∞–π–¥–µ–Ω–æ: {cycle_trades_found} | –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {cycle_trades_saved} | –î—É–±–ª–∏: {cycle_duplicates}"
            )

            return {
                'exchange': self.exchange_name,
                'cycle': self.stats['cycle_count'],
                'pairs_count': len(trading_pairs),
                'trades_found': cycle_trades_found,
                'trades_saved': cycle_trades_saved,
                'duplicates': cycle_duplicates,
                'duration': cycle_duration,
                'cache_efficiency': self._get_cache_stats(),
                'error': None
            }

        except Exception as e:
            return self._create_error_result(cycle_start, str(e))

    def _create_error_result(self, cycle_start: float, error_msg: str) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π."""
        cycle_duration = time.time() - cycle_start
        logger.error(f"[{self.exchange_name.upper()}] ‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ #{self.stats['cycle_count']}: {error_msg}")

        return {
            'exchange': self.exchange_name,
            'cycle': self.stats['cycle_count'],
            'pairs_count': 0,
            'trades_found': 0,
            'trades_saved': 0,
            'duplicates': 0,
            'duration': cycle_duration,
            'cache_efficiency': self._get_cache_stats(),
            'error': error_msg
        }

    def _get_cache_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞."""
        total_ops = self.stats['cache_hits'] + self.stats['cache_misses']
        hit_rate = (self.stats['cache_hits'] / total_ops * 100) if total_ops > 0 else 0

        return {
            'hit_rate': hit_rate,
            'memory_hits': self.stats['memory_cache_hits'],
            'db_hits': self.stats['db_cache_hits'],
            'api_updates': self.stats['api_updates'],
            'fallback_uses': self.stats['fallback_uses'],
            'total_operations': total_ops
        }

    async def run_forever(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏—Ä–∂–∏."""
        self.is_running = True
        logger.info(
            f"[{self.exchange_name.upper()}] üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ "
            f"(–ø–∞—É–∑–∞ {self.cycle_pause_minutes} –º–∏–Ω, –∫—ç—à {MEMORY_CACHE_TTL_MINUTES} –º–∏–Ω, "
            f"API {API_UPDATE_INTERVAL_MINUTES} –º–∏–Ω)"
        )

        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à
        logger.info(f"[{self.exchange_name.upper()}] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
        try:
            initial_pairs = await self.get_trading_pairs()
            if initial_pairs:
                logger.info(
                    f"[{self.exchange_name.upper()}] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, "
                    f"–Ω–∞–π–¥–µ–Ω–æ {len(initial_pairs)} –ø–∞—Ä, –∏—Å—Ç–æ—á–Ω–∏–∫: {self._memory_cache['source']}"
                )
            else:
                logger.warning(f"[{self.exchange_name.upper()}] ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à")
        except Exception as e:
            logger.error(f"[{self.exchange_name.upper()}] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞: {e}")

        while self.is_running:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª
                cycle_result = await self.run_cycle()

                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–∏–∫–ª–æ–≤
                if self.stats['cycle_count'] % 3 == 0:
                    cache_stats = self._get_cache_stats()
                    logger.info(
                        f"[{self.exchange_name.upper()}] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: "
                        f"—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {cache_stats['hit_rate']:.1f}%, "
                        f"memory:{cache_stats['memory_hits']}, db:{cache_stats['db_hits']}, "
                        f"API:{cache_stats['api_updates']}, fallback:{cache_stats['fallback_uses']}"
                    )

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                if self.is_running:
                    logger.info(f"[{self.exchange_name.upper()}] ‚è∏Ô∏è  –ü–∞—É–∑–∞ {self.cycle_pause_minutes} –º–∏–Ω—É—Ç...")

                    # –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    for remaining in range(self.cycle_pause_minutes * 60, 0, -30):
                        if not self.is_running:
                            break
                        await asyncio.sleep(min(30, remaining))

            except asyncio.CancelledError:
                logger.info(f"[{self.exchange_name.upper()}] üõë –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error(f"[{self.exchange_name.upper()}] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                logger.info(f"[{self.exchange_name.upper()}] üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É...")
                await asyncio.sleep(60)

        self.is_running = False
        logger.info(f"[{self.exchange_name.upper()}] üèÅ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä."""
        self.is_running = False

    def force_cache_update(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–º–µ—á–∞–µ—Ç –∫—ç—à –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ."""
        self._memory_cache['last_api_update'] = None
        self._memory_cache['pairs'] = None
        self._memory_cache['loaded_at'] = None
        logger.info(f"[{self.exchange_name.upper()}] üîÑ –ö—ç—à –ø–æ–º–µ—á–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    def get_stats(self) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Ä–∫–µ—Ä–∞.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        cache_stats = self._get_cache_stats()

        return {
            'exchange': self.exchange_name,
            'cycle_count': self.stats['cycle_count'],
            'total_trades_found': self.stats['total_trades_found'],
            'total_trades_saved': self.stats['total_trades_saved'],
            'cache_efficiency': cache_stats['hit_rate'],
            'memory_cache_hits': cache_stats['memory_hits'],
            'db_cache_hits': cache_stats['db_hits'],
            'api_updates': cache_stats['api_updates'],
            'fallback_uses': cache_stats['fallback_uses'],
            'api_calls_total': self.stats['api_calls'],
            'db_queries_total': self.stats['db_queries'],
            'memory_cache_valid': self._is_memory_cache_valid(),
            'last_api_update': datetime.fromtimestamp(self._memory_cache['last_api_update']).isoformat() if
            self._memory_cache['last_api_update'] else None,
            'last_cache_load': datetime.fromtimestamp(self._memory_cache['loaded_at']).isoformat() if
            self._memory_cache['loaded_at'] else None,
            'cached_pairs_count': len(self._memory_cache['pairs']) if self._memory_cache['pairs'] else 0,
            'cache_source': self._memory_cache['source'],
            'is_running': self.is_running
        }