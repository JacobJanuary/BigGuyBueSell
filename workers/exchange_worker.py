"""
–í–æ—Ä–∫–µ—Ä –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä.
"""
import asyncio
import logging
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional

from config.settings import MIN_TRADE_VALUE_USD, BATCH_SIZE, MAX_CONCURRENT_REQUESTS, PAIRS_CACHE_TTL_HOURS
from database.manager import DatabaseManager
from database.pairs_cache import PairsCacheManager
from database.models import Trade, TradingPairInfo
from typing import Optional, List

logger = logging.getLogger(__name__)


class ExchangeWorker:
    """–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä."""

    def __init__(
        self,
        exchange_name: str,
        client,
        analyzer,
        db_manager: DatabaseManager,
        cycle_pause_minutes: int = 5
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ—Ä–∫–µ—Ä –±–∏—Ä–∂–∏.

        Args:
            exchange_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            client: –ö–ª–∏–µ–Ω—Ç API –±–∏—Ä–∂–∏
            analyzer: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂–∏
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cycle_pause_minutes: –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        self.exchange_name = exchange_name
        self.client = client
        self.analyzer = analyzer
        self.db_manager = db_manager
        self.cycle_pause_minutes = cycle_pause_minutes
        self.semaphore = asyncio.Semaphore(MAX_CONCURRENT_REQUESTS)

        # –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        self.pairs_cache = PairsCacheManager(db_manager.pool)

        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
        self.last_cache_update = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.cycle_count = 0
        self.total_trades_found = 0
        self.total_trades_saved = 0
        self.cache_updates_count = 0
        self.is_running = False

        # –ë—ã—Å—Ç—Ä—ã–π –∫—ç—à –¥–ª—è –ø–∞—Ä
        self._quick_cache: Optional[List[TradingPairInfo]] = None
        self._quick_cache_time: Optional[float] = None
        self._quick_cache_ttl: int = 60  # TTL –±—ã—Å—Ç—Ä–æ–≥–æ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    async def process_pair(self, pair_info: TradingPairInfo) -> List[Trade]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É.

        Args:
            pair_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ

        Returns:
            –°–ø–∏—Å–æ–∫ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        """
        async with self.semaphore:
            try:
                trades_data = await self.client.get_recent_trades(pair_info.symbol)
                if not trades_data:
                    return []

                large_trades = []
                for trade_data in trades_data:
                    trade = await self.client.parse_trade(trade_data, pair_info)

                    if trade.value_usd >= Decimal(str(MIN_TRADE_VALUE_USD)):
                        large_trades.append(trade)

                return large_trades

            except Exception as e:
                logger.debug(f"[{self.exchange_name.upper()}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {pair_info.symbol}: {e}")
                return []

        async def get_trading_pairs(self) -> Optional[List[TradingPairInfo]]:
                """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±—ã—Å—Ç—Ä—ã–º –∫—ç—à–æ–º."""
        import time

        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã—Å—Ç—Ä—ã–π –∫—ç—à
        if (hasattr(self, '_quick_cache') and self._quick_cache and 
            hasattr(self, '_quick_cache_time') and self._quick_cache_time and
            (current_time - self._quick_cache_time) < getattr(self, '_quick_cache_ttl', 1800)):

            logger.debug(f"[{self.exchange_name.upper()}] üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –∫—ç—à")
            return self._quick_cache

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫—É–ª–¥–∞—É–Ω
        api_allowed = (not hasattr(self, '_last_api_call') or 
                       not self._last_api_call or
                       (current_time - self._last_api_call) >= getattr(self, '_api_cooldown', 3600))

        trading_pairs = None

        try:
            # –ü—Ä–æ–±—É–µ–º –ë–î –∫—ç—à –µ—Å–ª–∏ API –≤ –∫—É–ª–¥–∞—É–Ω–µ
            if not api_allowed:
                cache_fresh = await self.pairs_cache.is_cache_fresh(self.exchange_name, 3)
                if cache_fresh:
                    trading_pairs = await self.pairs_cache.get_cached_pairs(self.exchange_name)
                    if trading_pairs:
                        logger.info(f"[{self.exchange_name.upper()}] üì¶ –ë–î –∫—ç—à: {len(trading_pairs)} –ø–∞—Ä")

            # API –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
            if not trading_pairs and api_allowed:
                logger.info(f"[{self.exchange_name.upper()}] üåê API –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                self._last_api_call = current_time

                try:
                    trading_pairs = await self.update_pairs_cache()
                    if trading_pairs:
                        logger.info(f"[{self.exchange_name.upper()}] ‚úÖ API: {len(trading_pairs)} –ø–∞—Ä")
                except Exception as e:
                    logger.error(f"[{self.exchange_name.upper()}] ‚ùå API –æ—à–∏–±–∫–∞: {e}")
                    self._last_api_call = None

            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –∫—ç—à—É
            if not trading_pairs and hasattr(self, '_quick_cache') and self._quick_cache:
                cache_age_hours = (current_time - self._quick_cache_time) / 3600
                logger.warning(f"[{self.exchange_name.upper()}] üîÑ –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à ({cache_age_hours:.1f}—á)")
                return self._quick_cache

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—ã—Å—Ç—Ä—ã–π –∫—ç—à
            if trading_pairs:
                self._quick_cache = trading_pairs
                self._quick_cache_time = current_time

            return trading_pairs

        except Exception as e:
            logger.error(f"[{self.exchange_name.upper()}] üí• –û—à–∏–±–∫–∞: {e}")
            return getattr(self, '_quick_cache', None)

    async def run_forever(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏—Ä–∂–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        self.is_running = True
        logger.info(f"[{self.exchange_name.upper()}] üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–∞—É–∑–∞ {self.cycle_pause_minutes} –º–∏–Ω)")

        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à
        logger.info(f"[{self.exchange_name.upper()}] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
        try:
            initial_pairs = await self.get_trading_pairs()
            if initial_pairs:
                logger.info(f"[{self.exchange_name.upper()}] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞–π–¥–µ–Ω–æ {len(initial_pairs)} –ø–∞—Ä")
            else:
                logger.warning(f"[{self.exchange_name.upper()}] ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à")
        except Exception as e:
            logger.error(f"[{self.exchange_name.upper()}] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞: {e}")

        while self.is_running:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª
                await self.run_cycle()

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                if self.is_running:
                    logger.info(f"[{self.exchange_name.upper()}] ‚è∏Ô∏è  –ü–∞—É–∑–∞ {self.cycle_pause_minutes} –º–∏–Ω—É—Ç...")

                    # –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    for remaining in range(self.cycle_pause_minutes * 60, 0, -30):
                        if not self.is_running:
                            break
                        await asyncio.sleep(min(30, remaining))

            except asyncio.CancelledError:
                logger.info(f"[{self.exchange_name.upper()}] üõë –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error(f"[{self.exchange_name.upper()}] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                logger.info(f"[{self.exchange_name.upper()}] üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É...")
                await asyncio.sleep(60)

        self.is_running = False
        logger.info(f"[{self.exchange_name.upper()}] üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä."""
        self.is_running = False

    async def run_cycle(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏—Ä–∂–∏."""
        self.cycle_count += 1
        cycle_start = asyncio.get_event_loop().time()

        logger.info(f"[{self.exchange_name.upper()}] üîÑ –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ #{self.cycle_count}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            trading_pairs = await self.get_trading_pairs()
            if not trading_pairs:
                logger.warning(f"[{self.exchange_name.upper()}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")
                return

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
            trading_pairs.sort(key=lambda x: x.volume_24h_usd, reverse=True)

            logger.info(f"[{self.exchange_name.upper()}] üèÜ –¢–æ–ø-5 –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É:")
            for i, pair in enumerate(trading_pairs[:5], 1):
                logger.info(f"  {i}. {pair.symbol}: ${pair.volume_24h_usd:,.0f}")

            cycle_trades_found = 0
            cycle_trades_saved = 0
            cycle_duplicates = 0

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—ã –±–∞—Ç—á–∞–º–∏
            from config.settings import BATCH_SIZE
            for i in range(0, len(trading_pairs), BATCH_SIZE):
                batch = trading_pairs[i:i + BATCH_SIZE]

                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –±–∞—Ç—á–∞
                tasks = [
                    self.process_pair(pair_info)
                    for pair_info in batch
                ]

                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                results = await asyncio.gather(*tasks, return_exceptions=True)

                batch_trades = []
                for result in results:
                    if isinstance(result, Exception):
                        logger.debug(f"[{self.exchange_name.upper()}] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä—ã: {result}")
                        continue
                    batch_trades.extend(result)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                if batch_trades:
                    new_count, dup_count = await self.db_manager.save_trades(batch_trades)
                    cycle_trades_saved += new_count
                    cycle_duplicates += dup_count
                    cycle_trades_found += len(batch_trades)

                # –ü—Ä–æ–≥—Ä–µ—Å—Å
                processed = min(i + BATCH_SIZE, len(trading_pairs))
                if len(batch_trades) > 0:
                    logger.info(
                        f"[{self.exchange_name.upper()}] üìà {processed}/{len(trading_pairs)} –ø–∞—Ä | "
                        f"–ù–∞–π–¥–µ–Ω–æ: {len(batch_trades)} | –ù–æ–≤—ã—Ö: {new_count} | –î—É–±–ª–∏: {dup_count}"
                    )

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if i + BATCH_SIZE < len(trading_pairs):
                    await asyncio.sleep(0.5)

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.total_trades_found += cycle_trades_found
            self.total_trades_saved += cycle_trades_saved

            cycle_duration = asyncio.get_event_loop().time() - cycle_start

            logger.info(
                f"[{self.exchange_name.upper()}] ‚úÖ –¶–∏–∫–ª #{self.cycle_count} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration:.1f}—Å | "
                f"–ù–∞–π–¥–µ–Ω–æ: {cycle_trades_found} | –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {cycle_trades_saved} | –î—É–±–ª–∏: {cycle_duplicates}"
            )

        except Exception as e:
            cycle_duration = asyncio.get_event_loop().time() - cycle_start
            logger.error(f"[{self.exchange_name.upper()}] ‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ #{self.cycle_count}: {e}")

    async def process_pair(self, pair_info):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É."""
        async with self.semaphore:
            try:
                trades_data = await self.client.get_recent_trades(pair_info.symbol)
                if not trades_data:
                    return []

                large_trades = []
                for trade_data in trades_data:
                    trade = await self.client.parse_trade(trade_data, pair_info)

                    from decimal import Decimal
                    from config.settings import MIN_TRADE_VALUE_USD
                    if trade.value_usd >= Decimal(str(MIN_TRADE_VALUE_USD)):
                        large_trades.append(trade)

                return large_trades

            except Exception as e:
                logger.debug(f"[{self.exchange_name.upper()}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {pair_info.symbol}: {e}")
                return []