"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –±–∏—Ä–∂.
"""
import asyncio
import logging
from datetime import datetime
from typing import Dict, List

from database.manager import DatabaseManager

logger = logging.getLogger(__name__)


class StatisticsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –±–∏—Ä–∂."""

    def __init__(self, db_manager: DatabaseManager, report_interval_minutes: int = 10):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

        Args:
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            report_interval_minutes: –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–≤–æ–¥–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        self.db_manager = db_manager
        self.report_interval_minutes = report_interval_minutes
        self.workers: List = []
        self.is_running = False

    def register_worker(self, worker):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ—Ä–∫–µ—Ä –±–∏—Ä–∂–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.

        Args:
            worker: –≠–∫–∑–µ–º–ø–ª—è—Ä ExchangeWorker
        """
        self.workers.append(worker)
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤–æ—Ä–∫–µ—Ä {worker.exchange_name}")

    async def print_status_report(self):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—Å–µ—Ö –±–∏—Ä–∂."""
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        print(f"\n{'=' * 100}")
        print(f"–û–¢–ß–ï–¢ –û –†–ê–ë–û–¢–ï –ë–ò–†–ñ | –í—Ä–µ–º—è: {current_time}")
        print(f"{'=' * 100}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
        if self.workers:
            print(f"{'–ë–∏—Ä–∂–∞':>12} | {'–¶–∏–∫–ª–æ–≤':>8} | {'–ù–∞–π–¥–µ–Ω–æ':>10} | {'–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ':>12} | {'–ö—ç—à –æ–±–Ω.':>10} | {'–°—Ç–∞—Ç—É—Å':>10}")
            print(f"{'-' * 100}")

            for worker in self.workers:
                stats = worker.get_stats()
                status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if stats['is_running'] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                cache_updates = stats.get('cache_updates_count', 0)

                print(f"{stats['exchange'].upper():>12} | "
                      f"{stats['cycle_count']:>8} | "
                      f"{stats['total_trades_found']:>10} | "
                      f"{stats['total_trades_saved']:>12} | "
                      f"{cache_updates:>10} | "
                      f"{status:>10}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        try:
            from database.pairs_cache import PairsCacheManager
            pairs_cache = PairsCacheManager(self.db_manager.pool)

            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä:")
            print(f"{'–ë–∏—Ä–∂–∞':>12} | {'–í—Å–µ–≥–æ –ø–∞—Ä':>12} | {'–ê–∫—Ç–∏–≤–Ω—ã—Ö':>10} | {'–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º':>15} | {'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ':>20}")
            print(f"{'-' * 90}")

            for worker in self.workers:
                exchange = worker.exchange_name
                cache_stats = await pairs_cache.get_cache_stats(exchange)

                last_update = "–ù–∏–∫–æ–≥–¥–∞"
                if cache_stats['last_update']:
                    last_update = cache_stats['last_update'].strftime('%H:%M:%S')

                avg_volume = cache_stats['avg_volume']
                print(f"{exchange.upper():>12} | "
                      f"{cache_stats['total_pairs']:>12} | "
                      f"{cache_stats['active_pairs']:>10} | "
                      f"${avg_volume:>14,.0f} | "
                      f"{last_update:>20}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {e}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î –∑–∞ 24 —á–∞—Å–∞
        try:
            stats_by_exchange = await self.db_manager.get_statistics_by_exchange()
            if stats_by_exchange:
                print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫ –∑–∞ 24 —á–∞—Å–∞:")
                print(f"{'–ë–∏—Ä–∂–∞':>12} | {'–°–¥–µ–ª–æ–∫':>8} | {'–û–±—ä–µ–º, $':>15} | {'–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä, $':>18}")
                print(f"{'-' * 80}")

                total_stats_volume = 0
                total_stats_count = 0

                for exchange, stats in stats_by_exchange.items():
                    print(f"{exchange.upper():>12} | "
                          f"{stats['trade_count']:>8} | "
                          f"{stats['total_volume']:>15,.0f} | "
                          f"{stats['avg_trade_size']:>18,.0f}")
                    total_stats_volume += stats['total_volume']
                    total_stats_count += stats['trade_count']

                print(f"{'-' * 80}")
                avg_all = total_stats_volume / total_stats_count if total_stats_count > 0 else 0
                print(f"{'–ò–¢–û–ì–û':>12} | "
                      f"{total_stats_count:>8} | "
                      f"{total_stats_volume:>15,.0f} | "
                      f"{avg_all:>18,.0f}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î: {e}")

        print(f"{'=' * 100}\n")

    async def run_forever(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.is_running = True
        logger.info(f"–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ—Ç—á–µ—Ç—ã –∫–∞–∂–¥—ã–µ {self.report_interval_minutes} –º–∏–Ω)")

        # –ü–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç —Å—Ä–∞–∑—É
        await self.print_status_report()

        while self.is_running:
            try:
                # –ñ–¥–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                for remaining in range(self.report_interval_minutes * 60, 0, -30):
                    if not self.is_running:
                        break
                    await asyncio.sleep(min(30, remaining))

                if self.is_running:
                    await self.print_status_report()

            except asyncio.CancelledError:
                logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                await asyncio.sleep(60)

        self.is_running = False

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.is_running = False