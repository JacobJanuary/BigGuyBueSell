#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSL –ø—Ä–æ–±–ª–µ–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OKX API.
"""
import ssl
import aiohttp
import asyncio
import certifi
import os


def create_ssl_context_for_okx():
    """–°–æ–∑–¥–∞–µ—Ç SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å OKX."""
    try:
        # –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å certifi
        ssl_context = ssl.create_default_context(cafile=certifi.where())
        ssl_context.check_hostname = True
        ssl_context.verify_mode = ssl.CERT_REQUIRED
        return ssl_context
    except Exception as e:
        print(f"–ú–µ—Ç–æ–¥ 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

        try:
            # –ú–µ—Ç–æ–¥ 2: –û–±—ã—á–Ω—ã–π SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = True
            ssl_context.verify_mode = ssl.CERT_REQUIRED
            return ssl_context
        except Exception as e2:
            print(f"–ú–µ—Ç–æ–¥ 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")

            # –ú–µ—Ç–æ–¥ 3: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!)
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ SSL –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            return ssl_context


async def test_okx_connection_with_ssl_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OKX —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º SSL."""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OKX —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º SSL...")

    # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
    ssl_context = create_ssl_context_for_okx()

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä —Å SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    connector = aiohttp.TCPConnector(
        ssl=ssl_context,
        limit=50,
        limit_per_host=10,
        ttl_dns_cache=300,
        use_dns_cache=True,
    )

    timeout = aiohttp.ClientTimeout(total=30, connect=10)

    try:
        async with aiohttp.ClientSession(
                connector=connector,
                timeout=timeout,
                headers={'User-Agent': 'OKXTestClient/1.0'}
        ) as session:

            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
            print("  üì° –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
            try:
                async with session.get('https://www.okx.com/api/v5/public/time') as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('code') == '0':
                            server_time = data.get('data', [{}])[0].get('ts', 'N/A')
                            print(f"    ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_time}")
                        else:
                            print(f"    ‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg', 'Unknown error')}")
                            return False
                    else:
                        print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
                        return False
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                return False

            # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            print("  üìä –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
            try:
                async with session.get(
                        'https://www.okx.com/api/v5/public/instruments',
                        params={'instType': 'SPOT', 'limit': '5'}
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('code') == '0':
                            instruments = data.get('data', [])
                            print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(instruments)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                            if instruments:
                                print(f"    üìã –ü—Ä–∏–º–µ—Ä: {instruments[0].get('instId', 'N/A')}")
                        else:
                            print(f"    ‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg', 'Unknown error')}")
                            return False
                    else:
                        print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
                        return False
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
                return False

            # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤
            print("  üíπ –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤...")
            try:
                async with session.get(
                        'https://www.okx.com/api/v5/market/tickers',
                        params={'instType': 'SPOT', 'limit': '5'}
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('code') == '0':
                            tickers = data.get('data', [])
                            print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤")
                            if tickers:
                                ticker = tickers[0]
                                print(f"    üìà –ü—Ä–∏–º–µ—Ä: {ticker.get('instId', 'N/A')} - {ticker.get('last', 'N/A')}")
                        else:
                            print(f"    ‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg', 'Unknown error')}")
                            return False
                    else:
                        print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
                        return False
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤: {e}")
                return False

            print("  üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return True

    except Exception as e:
        print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def update_okx_client_with_ssl_fix():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç OKX –∫–ª–∏–µ–Ω—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º SSL."""
    print("\nüîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ OKX –∫–ª–∏–µ–Ω—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º SSL...")

    client_file = 'exchanges/okx/client.py'

    if not os.path.exists(client_file):
        print(f"‚ùå –§–∞–π–ª {client_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
        with open(client_file, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSL
        if 'ssl_context_for_okx' in content:
            print("  ‚úÖ SSL –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            return True

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        import shutil
        from datetime import datetime
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_file = f"{client_file}.backup_{timestamp}"
        shutil.copy2(client_file, backup_file)
        print(f"  üìÅ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è SSL
        ssl_imports = '''import ssl
import certifi'''

        if 'import certifi' not in content:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            import_section = content.find('from aiohttp import ClientSession')
            if import_section > 0:
                content = content[:import_section] + ssl_imports + '\n' + content[import_section:]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ssl_function = '''
def create_ssl_context_for_okx():
    """–°–æ–∑–¥–∞–µ—Ç SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è OKX API."""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º certifi –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        ssl_context = ssl.create_default_context(cafile=certifi.where())
        ssl_context.check_hostname = True
        ssl_context.verify_mode = ssl.CERT_REQUIRED
        return ssl_context
    except Exception:
        # Fallback: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
        try:
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = True
            ssl_context.verify_mode = ssl.CERT_REQUIRED
            return ssl_context
        except Exception:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π resort: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ SSL –ø—Ä–æ–≤–µ—Ä–∫–∏
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            return ssl_context

'''

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –∫–ª–∞—Å—Å–æ–º OKXClient
        class_pos = content.find('class OKXClient(ExchangeBase):')
        if class_pos > 0:
            content = content[:class_pos] + ssl_function + content[class_pos:]

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –º–µ—Å—Ç–∞ —Å self.session.get –∏ –¥–æ–±–∞–≤–ª—è–µ–º ssl –∫–æ–Ω—Ç–µ–∫—Å—Ç
        old_session_calls = [
            'async with self.session.get(url',
            'async with self.session.get(url,'
        ]

        for old_call in old_session_calls:
            if old_call in content:
                new_call = old_call.replace(
                    'async with self.session.get(url',
                    'async with self.session.get(url, ssl=create_ssl_context_for_okx()'
                )
                content = content.replace(old_call, new_call)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        with open(client_file, 'w', encoding='utf-8') as f:
            f.write(content)

        print("  ‚úÖ OKX –∫–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º SSL")
        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False


def check_ssl_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç SSL –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

    dependencies = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º certifi
    try:
        import certifi
        cert_path = certifi.where()
        print(f"  ‚úÖ certifi: {cert_path}")
        dependencies.append("certifi")
    except ImportError:
        print("  ‚ùå certifi –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install certifi")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenSSL –≤–µ—Ä—Å–∏—é
    try:
        import ssl
        print(f"  ‚úÖ OpenSSL: {ssl.OPENSSL_VERSION}")
        dependencies.append("ssl")
    except:
        print("  ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å SSL")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º aiohttp
    try:
        import aiohttp
        print(f"  ‚úÖ aiohttp: {aiohttp.__version__}")
        dependencies.append("aiohttp")
    except ImportError:
        print("  ‚ùå aiohttp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    return len(dependencies) >= 2  # –ú–∏–Ω–∏–º—É–º ssl –∏ aiohttp


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SSL."""
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SSL –ü–†–û–ë–õ–ï–ú OKX             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

–ü—Ä–æ–±–ª–µ–º–∞: SSL certificate verification failed
–†–µ—à–µ–Ω–∏–µ: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è OKX API

–ß—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ:
üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º SSL
üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ OKX –∫–ª–∏–µ–Ω—Ç–∞
‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    """)

    success_steps = []

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if check_ssl_dependencies():
        success_steps.append("dependencies")

    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print(f"\n{'=' * 60}")
    if await test_okx_connection_with_ssl_fix():
        success_steps.append("connection_test")

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç
    print(f"\n{'=' * 60}")
    if update_okx_client_with_ssl_fix():
        success_steps.append("client_updated")

    # 4. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
    print(f"\n{'=' * 60}")
    print("üß™ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º...")
    try:
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å
        import sys
        if 'exchanges.okx.client' in sys.modules:
            del sys.modules['exchanges.okx.client']

        from exchanges.okx.client import OKXClient
        from utils.rate_limiter import RateLimiter

        connector = aiohttp.TCPConnector(ssl=create_ssl_context_for_okx())
        timeout = aiohttp.ClientTimeout(total=30)

        async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
            client = OKXClient(session, RateLimiter(1200))

            if await client.test_connection():
                print("  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                success_steps.append("final_test")
            else:
                print("  ‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")

    # –ò—Ç–æ–≥–∏
    success_count = len(success_steps)
    total_steps = 4

    print(f"\n{'=' * 60}")
    print("–†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø SSL")
    print(f"{'=' * 60}")
    print(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {success_count}/{total_steps} —à–∞–≥–æ–≤")

    if success_count >= 3:
        print(f"""
üéâ SSL –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!

‚úÖ –ß–¢–û –°–î–ï–õ–ê–ù–û:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã SSL –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
‚Ä¢ –°–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω OKX –∫–ª–∏–µ–Ω—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º SSL
‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OKX API

üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç: python test_okx_quick.py
2. –ò–ª–∏ —Å—Ä–∞–∑—É –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python main.py
3. OKX –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ SSL –æ—à–∏–±–æ–∫

‚öôÔ∏è –ß–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–û:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏–∑ certifi
‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
‚Ä¢ Fallback –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ SSL –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SSL –æ—à–∏–±–æ–∫

üí° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:
–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å, –¥–æ–±–∞–≤—å—Ç–µ –≤ .env:
DISABLE_SSL_VERIFY=true

–≠—Ç–æ –æ—Ç–∫–ª—é—á–∏—Ç SSL –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
        """)
    else:
        print(f"""
‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SSL

–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–æ–ª—å–∫–æ {success_count}/{total_steps} —à–∞–≥–æ–≤.

üîß –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –†–ï–®–ï–ù–ò–Ø:

1. –û—Ç–∫–ª—é—á–∏—Ç—å SSL –ø—Ä–æ–≤–µ—Ä–∫—É (–±—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ):
   –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:
   DISABLE_SSL_VERIFY=true

2. –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–∏—Å—Ç–µ–º—ã:
   # Ubuntu/Debian:
   sudo apt-get update && sudo apt-get install ca-certificates

   # macOS:
   brew install ca-certificates

   # Windows:
   –û–±–Ω–æ–≤–∏—Ç–µ Python –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏

3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å certifi:
   pip install --upgrade certifi

4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π DNS:
   –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ DNS 8.8.8.8 –∏–ª–∏ 1.1.1.1

üìû –ü–û–î–î–ï–†–ñ–ö–ê:
–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å:
‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º firewall
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π OKX –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
        """)

    return success_count >= 3


if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nüëã –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        exit(1)