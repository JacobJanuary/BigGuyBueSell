#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã trading_pairs_cache.
"""
import asyncio
import logging

from database.manager import DatabaseManager
from config.settings import MYSQL_CONFIG

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def fix_table_structure():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã trading_pairs_cache."""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã trading_pairs_cache...")

    db_manager = DatabaseManager()

    try:
        await db_manager.connect()

        async with db_manager.pool.acquire() as conn:
            async with conn.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
                await cursor.execute("""
                                     SELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH
                                     FROM INFORMATION_SCHEMA.COLUMNS
                                     WHERE TABLE_SCHEMA = %s
                                       AND TABLE_NAME = 'trading_pairs_cache'
                                       AND COLUMN_NAME IN ('base_asset', 'quote_asset')
                                     """, (MYSQL_CONFIG['db'],))

                columns = await cursor.fetchall()

                if not columns:
                    print("‚ùå –¢–∞–±–ª–∏—Ü–∞ trading_pairs_cache –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã
                for column_name, data_type, max_length in columns:
                    print(f"  {column_name}: {data_type}({max_length})")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
                updates_needed = []
                for column_name, data_type, max_length in columns:
                    if max_length < 20:
                        updates_needed.append(column_name)

                if updates_needed:
                    print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏: {updates_needed}")

                    for column_name in updates_needed:
                        alter_sql = f"""
                        ALTER TABLE trading_pairs_cache 
                        MODIFY COLUMN {column_name} VARCHAR(20) NOT NULL
                        """
                        await cursor.execute(alter_sql)
                        print(f"  ‚úÖ {column_name}: VARCHAR(10) ‚Üí VARCHAR(20)")

                    print("üéâ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                else:
                    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")

                # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                await cursor.execute("DELETE FROM trading_pairs_cache")
                deleted_count = cursor.rowcount
                if deleted_count > 0:
                    print(f"üßπ –û—á–∏—â–µ–Ω —Å—Ç–∞—Ä—ã–π –∫—ç—à ({deleted_count} –∑–∞–ø–∏—Å–µ–π)")

                return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        await db_manager.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("=" * 60)
    print("–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ –ö–≠–®–ê")
    print("=" * 60)

    success = await fix_table_structure()

    if success:
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: python main.py")
    else:
        print("\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")

    print("=" * 60)


if __name__ == "__main__":
    asyncio.run(main())