"""
–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Coinbase.
"""

# –ü–û–î–ê–í–õ–ï–ù–ò–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô MYSQL
import warnings

warnings.filterwarnings("ignore")
warnings.filterwarnings('ignore', message='.*Data truncated.*')

import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Set, Optional
from decimal import Decimal
from collections import defaultdict
import time

from aiohttp import ClientSession
from database.models import Trade, TradingPairInfo
from config.settings import MIN_TRADE_VALUE_USD

logger = logging.getLogger(__name__)


class CoinbaseContinuousMonitor:
    """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è Coinbase —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º polling."""

    def __init__(self, session: ClientSession, db_manager):
        self.session = session
        self.db_manager = db_manager
        self.base_url = "https://api.coinbase.com/api/v3/brokerage"

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (10 RPS –ª–∏–º–∏—Ç)
        self.request_delay = 0.1  # 100ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (10 RPS)
        self.max_concurrent_pairs = 8  # –ë–æ–ª—å—à–µ –ø–∞—Ä —á–µ–º —É Bybit
        self.batch_save_size = 25

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.last_trade_times: Dict[str, int] = {}
        self.seen_trade_ids: Dict[str, Set[str]] = defaultdict(set)
        self.pending_trades: List[Trade] = []

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'errors': 0,
            'trades_found': 0,
            'large_trades_found': 0,
            'small_trades_filtered': 0,
            'trades_saved': 0,
            'duplicates_filtered': 0
        }

        self.active_monitors: Dict[str, asyncio.Task] = {}
        self.stop_monitoring = False

    async def start_monitoring(self, pairs: List[TradingPairInfo]) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä."""
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø –ø–∞—Ä—ã –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        top_pairs = sorted(pairs, key=lambda x: x.volume_24h_usd, reverse=True)
        selected_pairs = top_pairs[:self.max_concurrent_pairs]

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {len(selected_pairs)} —Ç–æ–ø –ø–∞—Ä Coinbase")
        for pair in selected_pairs:
            logger.info(f"   üìä {pair.symbol}: ${pair.volume_24h_usd:,.0f} –∑–∞ 24h")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        monitor_tasks = []
        for pair_info in selected_pairs:
            task = asyncio.create_task(
                self._monitor_pair_continuously(pair_info),
                name=f"coinbase_monitor_{pair_info.symbol}"
            )
            self.active_monitors[pair_info.symbol] = task
            monitor_tasks.append(task)

        # –ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        save_task = asyncio.create_task(self._periodic_save(), name="coinbase_periodic_save")
        stats_task = asyncio.create_task(self._periodic_stats(), name="coinbase_periodic_stats")
        monitor_tasks.extend([save_task, stats_task])

        try:
            await asyncio.gather(*monitor_tasks)
        except asyncio.CancelledError:
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Coinbase –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        finally:
            await self._save_pending_trades()

    async def _monitor_pair_continuously(self, pair_info: TradingPairInfo) -> None:
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–π –ø–∞—Ä—ã —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º rate limits."""
        symbol = pair_info.symbol
        consecutive_errors = 0
        last_request_time = 0

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç Coinbase
        coinbase_symbol = self._convert_symbol_to_coinbase(symbol)

        logger.info(f"üîÑ –ù–∞—á–∞—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol} -> {coinbase_symbol} (Coinbase)")

        while not self.stop_monitoring:
            try:
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫
                current_delay = self.request_delay * (1 + consecutive_errors)

                # –°–æ–±–ª—é–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                time_since_last = time.time() - last_request_time
                if time_since_last < current_delay:
                    await asyncio.sleep(current_delay - time_since_last)

                last_request_time = time.time()

                # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏
                trades_data = await self._get_recent_trades(coinbase_symbol)
                self.stats['total_requests'] += 1

                if trades_data is None:
                    consecutive_errors += 1
                    self.stats['errors'] += 1

                    # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                    error_delay = min(10.0, 0.2 * (2 ** consecutive_errors))
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {symbol} (Coinbase), –ø–∞—É–∑–∞ {error_delay:.1f}—Å")
                    await asyncio.sleep(error_delay)
                    continue

                consecutive_errors = 0
                self.stats['successful_requests'] += 1

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                new_trades = await self._process_trades_data(trades_data, pair_info)

                if new_trades:
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
                    large_trades = [
                        trade for trade in new_trades
                        if trade.value_usd >= Decimal(str(MIN_TRADE_VALUE_USD))
                    ]

                    self.stats['trades_found'] += len(new_trades)
                    self.stats['large_trades_found'] += len(large_trades)
                    self.stats['small_trades_filtered'] += len(new_trades) - len(large_trades)

                    if large_trades:
                        self.pending_trades.extend(large_trades)

                        # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                        for trade in large_trades:
                            logger.info(
                                f"üí∞ {symbol} [COINBASE]: ${trade.value_usd:,.0f} –≤ {trade.trade_datetime.strftime('%H:%M:%S')}")

            except asyncio.CancelledError:
                logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol} (Coinbase) –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                consecutive_errors += 1
                self.stats['errors'] += 1
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {symbol} (Coinbase): {e}")
                await asyncio.sleep(2.0)

    async def _get_recent_trades(self, coinbase_symbol: str) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –ø–∞—Ä—ã —á–µ—Ä–µ–∑ Coinbase API."""
        try:
            url = f"{self.base_url}/products/{coinbase_symbol}/trades"
            params = {
                'limit': 100  # Coinbase –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ 100 —Å–¥–µ–ª–æ–∫
            }

            # –ü—É–±–ª–∏—á–Ω—ã–π endpoint, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            async with self.session.get(url, params=params) as response:
                if response.status == 429:
                    # Rate limit
                    return None

                if response.status != 200:
                    return None

                data = await response.json()

                # Coinbase –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ trades –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –≤ –ø–æ–ª–µ trades
                if isinstance(data, list):
                    return data
                elif isinstance(data, dict) and 'trades' in data:
                    return data['trades']
                else:
                    return None

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {coinbase_symbol} (Coinbase): {e}")
            return None

    def _convert_symbol_to_coinbase(self, symbol: str) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ Binance/Bybit –≤ —Ñ–æ—Ä–º–∞—Ç Coinbase.
        –ù–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT -> BTC-USD, ETHUSDT -> ETH-USD
        """
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        conversions = {
            'USDT': 'USD',
            'USDC': 'USD'  # –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö
        }

        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ quote currencies
        for old_quote, new_quote in conversions.items():
            if symbol.endswith(old_quote):
                base = symbol[:-len(old_quote)]
                return f"{base}-{new_quote}"

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if len(symbol) == 6:  # –ù–∞–ø—Ä–∏–º–µ—Ä BTCUSD
            return f"{symbol[:3]}-{symbol[3:]}"
        elif len(symbol) == 7:  # –ù–∞–ø—Ä–∏–º–µ—Ä ETHUSD
            return f"{symbol[:4]}-{symbol[4:]}"

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return symbol

    async def _process_trades_data(self, trades_data: List[Dict], pair_info: TradingPairInfo) -> List[Trade]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã."""
        if not trades_data:
            return []

        symbol = pair_info.symbol
        new_trades = []

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏
        last_known_time = self.last_trade_times.get(symbol, 0)
        max_trade_time = last_known_time

        for trade_data in trades_data:
            try:
                trade_id = str(trade_data.get('trade_id', trade_data.get('id', '')))

                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
                time_str = trade_data.get('time', '')
                if time_str:
                    # Coinbase –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ISO 8601 —Ñ–æ—Ä–º–∞—Ç
                    trade_time = int(datetime.fromisoformat(time_str.replace('Z', '+00:00')).timestamp() * 1000)
                else:
                    continue

                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ ID
                if (trade_time > last_known_time and
                        trade_id not in self.seen_trade_ids[symbol]):

                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Trade
                    trade = Trade.from_coinbase_response(
                        trade_data,
                        pair_info.symbol,
                        pair_info.base_asset,
                        pair_info.quote_asset,
                        pair_info.quote_price_usd
                    )

                    new_trades.append(trade)
                    self.seen_trade_ids[symbol].add(trade_id)
                    max_trade_time = max(max_trade_time, trade_time)
                else:
                    self.stats['duplicates_filtered'] += 1

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏ {symbol} (Coinbase): {e}")
                continue

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏
        if max_trade_time > last_known_time:
            self.last_trade_times[symbol] = max_trade_time

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞ ID
        if len(self.seen_trade_ids[symbol]) > 15000:
            sorted_ids = sorted(self.seen_trade_ids[symbol])
            self.seen_trade_ids[symbol] = set(sorted_ids[-7500:])

        return new_trades

    async def _periodic_save(self) -> None:
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏."""
        while not self.stop_monitoring:
            try:
                await asyncio.sleep(3.0)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
                await self._save_pending_trades()
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (Coinbase): {e}")

    async def _save_pending_trades(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤ –ë–î."""
        if not self.pending_trades:
            return

        try:
            trades_to_save = self.pending_trades.copy()
            self.pending_trades.clear()

            if trades_to_save:
                new_count, dup_count = await self.db_manager.save_trades(trades_to_save)
                self.stats['trades_saved'] += new_count

                if new_count > 0:
                    logger.info(f"üíæ Coinbase: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {new_count} –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫, –ø—Ä–æ–ø—É—â–µ–Ω–æ {dup_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ Coinbase: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–¥–µ–ª–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –±—É—Ñ–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.pending_trades.extend(trades_to_save)

    async def _periodic_stats(self) -> None:
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        start_time = time.time()

        while not self.stop_monitoring:
            try:
                await asyncio.sleep(45.0)  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 45 —Å–µ–∫—É–Ω–¥

                runtime = time.time() - start_time
                rps = self.stats['total_requests'] / runtime if runtime > 0 else 0
                success_rate = (self.stats['successful_requests'] / self.stats['total_requests'] * 100
                                if self.stats['total_requests'] > 0 else 0)

                logger.info(f"üìä Coinbase —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {runtime:.0f}—Å:")
                logger.info(f"   –ó–∞–ø—Ä–æ—Å–æ–≤: {self.stats['total_requests']} ({rps:.1f} RPS)")
                logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {success_rate:.1f}%")
                logger.info(f"   –°–¥–µ–ª–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {self.stats['trades_found']}")
                logger.info(f"   –ö—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {self.stats['large_trades_found']} (${MIN_TRADE_VALUE_USD}+)")
                logger.info(f"   –ú–µ–ª–∫–∏—Ö –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {self.stats['small_trades_filtered']}")
                logger.info(f"   –°–¥–µ–ª–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {self.stats['trades_saved']}")
                logger.info(f"   –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {self.stats['duplicates_filtered']}")
                logger.info(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {len([t for t in self.active_monitors.values() if not t.done()])}")

            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (Coinbase): {e}")

    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Coinbase...")
        self.stop_monitoring = True

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task in self.active_monitors.values():
            if not task.done():
                task.cancel()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        if self.active_monitors:
            await asyncio.gather(*self.active_monitors.values(), return_exceptions=True)

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        await self._save_pending_trades()

        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Coinbase –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        return self.stats.copy()


class CoinbaseAggressiveClient:
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Coinbase –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–æ–∫."""

    def __init__(self, session: ClientSession, rate_limiter):
        self.session = session
        self.rate_limiter = rate_limiter  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.base_url = "https://api.coinbase.com/api/v3/brokerage"
        self.exchange_name = 'coinbase'
        self.monitor: Optional[CoinbaseContinuousMonitor] = None

    async def start_aggressive_monitoring(self, pairs: List[TradingPairInfo], db_manager) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
        if self.monitor:
            await self.monitor.stop()

        self.monitor = CoinbaseContinuousMonitor(self.session, db_manager)
        await self.monitor.start_monitoring(pairs)

    async def stop_monitoring(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
        if self.monitor:
            await self.monitor.stop()
            self.monitor = None

    async def get_monitoring_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        if self.monitor:
            return self.monitor.get_stats()
        return {}

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
        try:
            url = f"{self.base_url}/products"
            async with self.session.get(url) as response:
                return response.status == 200
        except:
            return False

    async def get_products(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö."""
        url = f"{self.base_url}/products"

        async with self.session.get(url) as response:
            response.raise_for_status()
            return await response.json()

    async def get_24hr_stats(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç 24hr —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—ç–º—É–ª—è—Ü–∏—è)."""
        # Coinbase Advanced Trade –Ω–µ –∏–º–µ–µ—Ç –µ–¥–∏–Ω–æ–≥–æ endpoint –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –∏–∑ products
        return []