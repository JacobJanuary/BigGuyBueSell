#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ ExchangeWorker.
quick_cache_fix.py

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∞.
"""
import os
import shutil
from datetime import datetime

QUICK_FIX_CODE = '''
# === –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–õ–Ø ExchangeWorker ===
# –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ –º–µ—Ç–æ–¥–∞ __init__ –∫–ª–∞—Å—Å–∞ ExchangeWorker:

# –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è - –¥–æ–±–∞–≤–∏—Ç—å –≤ __init__
self._quick_cache = None
self._quick_cache_time = None
self._quick_cache_ttl = 1800  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
self._api_cooldown = 3600     # 1 —á–∞—Å –º–µ–∂–¥—É API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
self._last_api_call = None

# === –ó–ê–ú–ï–ù–ò–¢–ï get_trading_pairs() –ù–ê –≠–¢–û–¢ –ö–û–î ===

async def get_trading_pairs(self) -> Optional[List[TradingPairInfo]]:
    """–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞."""
    import time

    current_time = time.time()

    # 1. –ü–†–û–í–ï–†–Ø–ï–ú –ë–´–°–¢–†–´–ô –ö–≠–®–¨ (–ì–õ–ê–í–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø)
    if (self._quick_cache and 
        self._quick_cache_time and
        (current_time - self._quick_cache_time) < self._quick_cache_ttl):

        logger.debug(f"[{self.exchange_name.upper()}] üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –∫—ç—à")
        return self._quick_cache

    # 2. –ü–†–û–í–ï–†–Ø–ï–ú –ú–û–ñ–ù–û –õ–ò –í–´–ó–´–í–ê–¢–¨ API (–ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–ï –ß–ê–°–¢–´–• –í–´–ó–û–í–û–í)
    api_allowed = (not self._last_api_call or 
                   (current_time - self._last_api_call) >= self._api_cooldown)

    trading_pairs = None

    try:
        # 3. –°–ù–ê–ß–ê–õ–ê –ü–†–û–ë–£–ï–ú –ë–î –ö–≠–®–¨
        if not api_allowed:
            # –ï—Å–ª–∏ API –Ω–µ–ª—å–∑—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ë–î –∫—ç—à –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —á—É—Ç—å —É—Å—Ç–∞—Ä–µ–ª
            logger.debug(f"[{self.exchange_name.upper()}] API –≤ –∫—É–ª–¥–∞—É–Ω–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –∫—ç—à")

            cache_fresh = await self.pairs_cache.is_cache_fresh(
                self.exchange_name, 
                max_age_hours=3  # –ë–æ–ª–µ–µ —â–∞–¥—è—â–∏–π TTL
            )

            if cache_fresh:
                trading_pairs = await self.pairs_cache.get_cached_pairs(self.exchange_name)
                if trading_pairs:
                    logger.info(f"[{self.exchange_name.upper()}] üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(trading_pairs)} –ø–∞—Ä –∏–∑ –ë–î –∫—ç—à–∞")

        # 4. –í–´–ó–´–í–ê–ï–ú API –¢–û–õ–¨–ö–û –ï–°–õ–ò –ù–ï–û–ë–•–û–î–ò–ú–û –ò –†–ê–ó–†–ï–®–ï–ù–û
        if not trading_pairs and api_allowed:
            logger.info(f"[{self.exchange_name.upper()}] üåê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API (–∫—É–ª–¥–∞—É–Ω –∏—Å—Ç–µ–∫)")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω –î–û –≤—ã–∑–æ–≤–∞ API
            self._last_api_call = current_time

            try:
                trading_pairs = await self.update_pairs_cache()
                if trading_pairs:
                    logger.info(f"[{self.exchange_name.upper()}] ‚úÖ API –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {len(trading_pairs)} –ø–∞—Ä")
            except Exception as e:
                logger.error(f"[{self.exchange_name.upper()}] ‚ùå –û—à–∏–±–∫–∞ API: {e}")
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                self._last_api_call = None

        # 5. FALLBACK - –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–¢–ê–†–´–ô –ö–≠–®–¨ –ï–°–õ–ò –ï–°–¢–¨
        if not trading_pairs and self._quick_cache:
            cache_age_hours = (current_time - self._quick_cache_time) / 3600
            logger.warning(
                f"[{self.exchange_name.upper()}] üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à "
                f"(–≤–æ–∑—Ä–∞—Å—Ç {cache_age_hours:.1f}—á)"
            )
            return self._quick_cache

        # 6. –°–û–•–†–ê–ù–Ø–ï–ú –í –ë–´–°–¢–†–´–ô –ö–≠–®–¨
        if trading_pairs:
            self._quick_cache = trading_pairs
            self._quick_cache_time = current_time
            logger.debug(f"[{self.exchange_name.upper()}] üíæ –û–±–Ω–æ–≤–ª–µ–Ω –±—ã—Å—Ç—Ä—ã–π –∫—ç—à")

        return trading_pairs

    except Exception as e:
        logger.error(f"[{self.exchange_name.upper()}] üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä: {e}")

        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
        if self._quick_cache:
            logger.warning(f"[{self.exchange_name.upper()}] üÜò –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–π –∫—ç—à")
            return self._quick_cache

        return None

# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===

def get_cache_stats(self) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—ã—Å—Ç—Ä–æ–≥–æ –∫—ç—à–∞."""
    import time
    current_time = time.time()

    if self._quick_cache_time:
        cache_age_minutes = (current_time - self._quick_cache_time) / 60
        cache_valid = cache_age_minutes < (self._quick_cache_ttl / 60)
    else:
        cache_age_minutes = 0
        cache_valid = False

    api_cooldown_remaining = 0
    if self._last_api_call:
        api_cooldown_remaining = max(0, self._api_cooldown - (current_time - self._last_api_call))

    return {
        'cache_size': len(self._quick_cache) if self._quick_cache else 0,
        'cache_age_minutes': cache_age_minutes,
        'cache_valid': cache_valid,
        'api_cooldown_remaining_seconds': api_cooldown_remaining,
        'last_api_call': datetime.fromtimestamp(self._last_api_call).isoformat() if self._last_api_call else None
    }

def force_cache_refresh(self):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—ç—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    self._quick_cache = None
    self._quick_cache_time = None
    self._last_api_call = None
    logger.info(f"[{self.exchange_name.upper()}] üîÑ –ö—ç—à –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—à–µ–Ω")
'''


def create_backup():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞."""
    original_file = 'workers/exchange_worker.py'

    if not os.path.exists(original_file):
        print(f"‚ùå –§–∞–π–ª {original_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_file = f'workers/exchange_worker_backup_{timestamp}.py'

    try:
        shutil.copy2(original_file, backup_file)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
        return backup_file
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return None


def apply_quick_fix():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –±—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ñ–∞–π–ª—É ExchangeWorker."""
    print("üîß –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ë–´–°–¢–†–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 50)

    # 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file = create_backup()
    if not backup_file:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
        return False

    # 2. –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    original_file = 'workers/exchange_worker.py'
    try:
        with open(original_file, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª–æ—Å—å –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ
    if '_quick_cache' in content:
        print("‚ÑπÔ∏è  –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        return True

    # 4. –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ __init__
    init_marker = 'def __init__('
    init_pos = content.find(init_marker)

    if init_pos == -1:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ __init__ –≤ ExchangeWorker")
        return False

    # –ò—â–µ–º –∫–æ–Ω–µ—Ü __init__ –º–µ—Ç–æ–¥–∞ (–Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ –∏–ª–∏ –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞)
    lines = content[init_pos:].split('\n')
    init_end_line = 0

    for i, line in enumerate(lines[1:], 1):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å def __init__
        if line.strip() and not line.startswith(' ') and not line.startswith('\t'):
            # –ù–∞–π–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥ –∏–ª–∏ –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞
            init_end_line = i
            break
        elif line.strip().startswith('def ') and not line.startswith('        '):
            # –ù–∞–π–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞
            init_end_line = i
            break

    if init_end_line == 0:
        init_end_line = len(lines)

    # 5. –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    init_code = '''
        # === –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ===
        self._quick_cache = None
        self._quick_cache_time = None
        self._quick_cache_ttl = 1800  # 30 –º–∏–Ω—É—Ç
        self._api_cooldown = 3600     # 1 —á–∞—Å –º–µ–∂–¥—É API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        self._last_api_call = None

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ __init__
        logger.info(f"[{self.exchange_name.upper()}] üöÄ –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
'''

    # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü __init__
    init_section = '\n'.join(lines[:init_end_line - 1])
    rest_section = '\n'.join(lines[init_end_line - 1:])

    new_init_section = init_section + init_code + '\n'
    new_content_part = content[:init_pos] + new_init_section + rest_section

    # 6. –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ get_trading_pairs
    get_pairs_marker = 'async def get_trading_pairs('
    get_pairs_pos = new_content_part.find(get_pairs_marker)

    if get_pairs_pos == -1:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ get_trading_pairs")
        return False

    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –º–µ—Ç–æ–¥–∞ get_trading_pairs
    lines_after_method = new_content_part[get_pairs_pos:].split('\n')
    method_end_line = 0

    for i, line in enumerate(lines_after_method[1:], 1):
        if line.strip() and not line.startswith(' ') and not line.startswith('\t'):
            if line.strip().startswith('async def ') or line.strip().startswith('def '):
                method_end_line = i
                break

    if method_end_line == 0:
        method_end_line = len(lines_after_method)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ get_trading_pairs
    new_method = '''    async def get_trading_pairs(self) -> Optional[List[TradingPairInfo]]:
        """–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∫—ç—à–∞."""
        import time

        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã—Å—Ç—Ä—ã–π –∫—ç—à
        if (self._quick_cache and 
            self._quick_cache_time and
            (current_time - self._quick_cache_time) < self._quick_cache_ttl):

            logger.debug(f"[{self.exchange_name.upper()}] üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –∫—ç—à")
            return self._quick_cache

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫—É–ª–¥–∞—É–Ω
        api_allowed = (not self._last_api_call or 
                       (current_time - self._last_api_call) >= self._api_cooldown)

        trading_pairs = None

        try:
            # –ü—Ä–æ–±—É–µ–º –ë–î –∫—ç—à –µ—Å–ª–∏ API –≤ –∫—É–ª–¥–∞—É–Ω–µ
            if not api_allowed:
                cache_fresh = await self.pairs_cache.is_cache_fresh(
                    self.exchange_name, max_age_hours=3
                )

                if cache_fresh:
                    trading_pairs = await self.pairs_cache.get_cached_pairs(self.exchange_name)
                    if trading_pairs:
                        logger.info(f"[{self.exchange_name.upper()}] üì¶ –ë–î –∫—ç—à: {len(trading_pairs)} –ø–∞—Ä")

            # API –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
            if not trading_pairs and api_allowed:
                logger.info(f"[{self.exchange_name.upper()}] üåê API –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                self._last_api_call = current_time

                try:
                    trading_pairs = await self.update_pairs_cache()
                    if trading_pairs:
                        logger.info(f"[{self.exchange_name.upper()}] ‚úÖ API: {len(trading_pairs)} –ø–∞—Ä")
                except Exception as e:
                    logger.error(f"[{self.exchange_name.upper()}] ‚ùå API –æ—à–∏–±–∫–∞: {e}")
                    self._last_api_call = None

            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –∫—ç—à—É
            if not trading_pairs and self._quick_cache:
                cache_age_hours = (current_time - self._quick_cache_time) / 3600
                logger.warning(
                    f"[{self.exchange_name.upper()}] üîÑ –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à ({cache_age_hours:.1f}—á)"
                )
                return self._quick_cache

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—ã—Å—Ç—Ä—ã–π –∫—ç—à
            if trading_pairs:
                self._quick_cache = trading_pairs
                self._quick_cache_time = current_time

            return trading_pairs

        except Exception as e:
            logger.error(f"[{self.exchange_name.upper()}] üí• –û—à–∏–±–∫–∞: {e}")
            return self._quick_cache if self._quick_cache else None
'''

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    before_method = new_content_part[:get_pairs_pos]
    after_method = '\n'.join(lines_after_method[method_end_line:])

    final_content = before_method + new_method + '\n' + after_method

    # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    try:
        with open(original_file, 'w', encoding='utf-8') as f:
            f.write(final_content)

        print("‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}")

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        try:
            shutil.copy2(backup_file, original_file)
            print("üîÑ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        except:
            pass

        return False


def show_quick_fix_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ã—Å—Ç—Ä–æ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏."""
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë              –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï                  ‚ïë
    ‚ïë           –ü–†–û–ë–õ–ï–ú –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø                     ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

    üéØ –¶–ï–õ–¨: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å API –≤—ã–∑–æ–≤—ã –Ω–∞ 90%

    üîß –ß–¢–û –î–ï–õ–ê–ï–¢:
    ‚Ä¢ –î–æ–±–∞–≤–ª—è–µ—Ç in-memory –∫—ç—à –Ω–∞ 30 –º–∏–Ω—É—Ç
    ‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É–ª–¥–∞—É–Ω API –Ω–∞ 1 —á–∞—Å
    ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª–µ–µ —â–∞–¥—è—â–∏–π –ë–î –∫—ç—à (3 —á–∞—Å–∞)
    ‚Ä¢ –î–æ–±–∞–≤–ª—è–µ—Ç fallback –∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–º—É –∫—ç—à—É

    ‚ö° –û–ñ–ò–î–ê–ï–ú–´–ô –≠–§–§–ï–ö–¢:
    ‚Ä¢ API –≤—ã–∑–æ–≤—ã: —Å –∫–∞–∂–¥–æ–≥–æ —Ü–∏–∫–ª–∞ ‚Üí —Ä–∞–∑ –≤ —á–∞—Å
    ‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –≤ 10+ —Ä–∞–∑
    ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API

    ‚ö†Ô∏è  –í–ê–ñ–ù–û:
    ‚Ä¢ –°–æ–∑–¥–∞–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    ‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
    ‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

    üìã –ü–û–°–õ–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø:
    1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "üöÄ –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ API –≤—ã–∑–æ–≤–æ–≤
    """)


def create_env_patch():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ç—á –¥–ª—è .env —Ñ–∞–π–ª–∞."""
    env_patch = """
# === –î–û–ë–ê–í–¨–¢–ï –í .env –î–õ–Ø –ë–´–°–¢–†–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===
# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ (–±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
PAIRS_CACHE_UPDATE_MINUTES=60
PAIRS_CACHE_TTL_HOURS=3
MONITORING_PAUSE_MINUTES=5

# –õ–æ–≥ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# LOG_LEVEL=DEBUG
"""

    env_file = '.env'
    if os.path.exists(env_file):
        with open(env_file, 'r', encoding='utf-8') as f:
            content = f.read()

        if 'PAIRS_CACHE_UPDATE_MINUTES' not in content:
            with open(env_file, 'a', encoding='utf-8') as f:
                f.write(env_patch)
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ .env")
        else:
            print("‚ÑπÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –µ—Å—Ç—å –≤ .env")
    else:
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(env_patch.strip())
        print("‚úÖ –°–æ–∑–¥–∞–Ω .env —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    show_quick_fix_info()

    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. üîß –ü—Ä–∏–º–µ–Ω–∏—Ç—å –±—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    print("2. üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")
    print("3. ‚öôÔ∏è  –°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å .env –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("4. ‚ÑπÔ∏è  –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    print("5. üö™ –í—ã—Ö–æ–¥")

    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥")
        return

    if choice == "1":
        print("\nüîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        success = apply_quick_fix()
        if success:
            print("""
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–û –£–°–ü–ï–®–ù–û!

üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python main.py
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å üöÄ
3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ API –≤—ã–∑–æ–≤–æ–≤

üîÑ –î–ª—è –æ—Ç–∫–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ workers/
            """)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

    elif choice == "2":
        print("\nüìã –ö–û–î –î–õ–Ø –†–£–ß–ù–û–ì–û –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø:")
        print("=" * 60)
        print(QUICK_FIX_CODE)
        print("=" * 60)
        print("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤—ã—à–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ workers/exchange_worker.py")

    elif choice == "3":
        print("\n‚öôÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        create_env_patch()

    elif choice == "4":
        show_quick_fix_info()

    elif choice == "5":
        print("üëã –í—ã—Ö–æ–¥")

    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main()